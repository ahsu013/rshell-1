Script started on Tue 21 Oct 2014 10:01:33 PM PDT
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ hello world
i hatThe program 'hello' can be found in the following packages:
 * hello
 * hello-debhelper
Try: sudo apt-get install <selected package>
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ i hate you all
The program 'i' is currently not installed. You can install it by typing:
sudo apt-get install iprint
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ lololol
lololol: command not found
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script
Script started, file is typescript
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ /script
bash: /script: No such file or directory
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ exit
exit
Script done, file is typescript
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script s[Ksomething.script
Script started, file is something.script
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ echo hello world
hello world
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ echo swag
swag
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ echo swag; echo true
swag
true
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ exit
exit
Script done, file is something.script
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script x.script[K[K[K[K[K[Ktxt
Script started, file is x.txt
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ hello world
The program 'hello' can be found in the following packages:
 * hello
 * hello-debhelper
Try: sudo apt-get install <selected package>
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ exit
exit
Script done, file is x.txt
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script x.txt[K[K[K[K[K[K[K[K[K[K[K[K.a[K/[Ka.[K[K/a.out
$ script
Script started, file is typescript
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ exit
exit
Script done, file is typescript
$ exit
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script
Script started, file is typescript
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ .a[K/a.out
$ t echo hello world
hello world
$ echo hello swag
hello swag
$ echo something; echo another thna  angggg :D  ;
something
another thangggg
$ exit
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ exit
exit
Script done, file is typescript
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ script[K[K[K[K[K[K./a.outscript x.txtsomething.script[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kg++ exec.cpp -Wall -Wansi -[K[K[K[K[K[K[KWerror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:127:30: error: ISO C++ forbids variable length array â€˜listâ€™ [-Werror=vla]
   char* list[totalWordCount+1]; // +1 for null
                              ^
exec.cpp:160:12: error: unused variable â€˜xâ€™ [-Werror=unused-variable]
        int x = waitpid(-1, &status, 0);
            ^
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedantic[K./a.outscript x.txtsomething.script[K[K[K[K[K[K[Kvim exec.cpp
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 197L, 4952C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h6[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m132 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m133 [m[9C{
[33m134 [m[14C[34m// execute the command[m
[33m135 [m[14Cpid_t pid;
[33m136 [m[14C[32mint[m status = [31m0[m;
[33m137 [m[14Cpid = fork();
[33m138 
139 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m140 [m[14C{
[33m141 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m142 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m143 [m[14C}
[33m144 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m145 [m[14C{
[33m146 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m147 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m148 [m[17Clist[count] = [31mNULL[m;
[33m149 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m150 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m151 [m[17C{
[33m152 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m153 [m[20Cexit([31m1[m); [34m// dip[m
[33m154 [m[17C}
[33m155 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m156 
157 [m[14C}
[33m158 [14Celse[m [34m// parent process---wait until the child is done[m
[33m159 [m[14C{
[33m160 [m[17C[32mint[m x =   waitpid(-[31m1[m, &status, [31m0[m);
[33m161 [m[18C[34m//cout << "THE STATUS: " << status << endl;[m
[33m162 [17Cif[m(words[i] == [31m"&&"[m && (status > [31m0[m))
[33m163 [21Cbreak[m;
[33m164 
165 [18Cif[m(words[i] == [31m"||"[m && (status <= [31m0[m))
[33m166 [21Cbreak[m;
[33m167 [m[14C}
[33m168 
169 [m[15C[34m// reset the list[m
[33m170 [15Cfor[m([32mint[m j = [31m0[m; j < count; j++) {
[33m171 [m[18Clist[j] = [31mNULL[m;
[33m172 [m[15C}
[33m173 [m[15Ccount = [31m0[m;
[33m174 [m[9C}
[33m175 [9Celse[m {
[33m176 [m[12C[34m//cout << "Adding word" << endl;[m
[33m177 [12Cif[m(count == [31m0[m && words[i] == [31m"exit"[m)
[33m178 [m[12C{
[33m179 [m[15Cexit([31m1[m);
[33m180 [m[12C}
[33m181 [m[12Clist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];
[33m182 [m[12Ccopy(words[i].begin(), words[i].end(), list[count]);
[33m183 [m[12Clist[count][words[i].size()] = [35m'\0'[m;
[33m184 
185 [m[12C[34m//cout << "..." << list[count] << endl;[m
[33m186 [m[12Ccount++;
[33m187 [m[9C}
[33m188 [m      }[58;188H160,8-18      93%[29;22H[?12l[?25h[?25l[58;192H9-19[29;23H[?12l[?25h[?25l[58;192H10-20[29;24H[?12l[?25h[?25l[58;193H1-21[29;25H[?12l[?25h[?25l[58;193H2-22[29;26H[?12l[?25h[?25l[58;193H3-23[29;27H[?12l[?25h[?25l[58;193H4-24[29;28H[?12l[?25h[?25l[58;193H5-27[29;31H[?12l[?25h[?25l[58;193H4-24[29;28H[?12l[?25h[?25l[58;193H3-23[29;27H[?12l[?25h[?25l[58;193H4-24[29;28H[?12l[?25h[?25l[58;193H5-27[29;31H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H161,8-18      92%[30;23H[K[31;22H [34m//cout << "THE STATUS: " << status << endl;[m[32;22H[33mif[m(words[i] == [31m"&&"[m && (status > [31m0[m))[33;26H[33mbreak[m;[34;23H[K[35;23H[33mif[m(words[i] == [31m"||"[m && (status <= [31m0[m))[36;19H       [33mbreak[m;[37;19H}[38;20H[K[39;20H[34m// reset the list[m[39;37H[K[40;20H[33mfor[m([32mint[m j = [31m0[m; j < count; j++) {[41;20H   list[j] = [31mNULL[m;[42;20H}  [42;23H[K[43;14H      count = [31m0[m;[44;14H}  [44;17H[K[45;14H[33melse[m {[45;20H[K[46;17H[34m//cout << "Adding word" << endl;[m[46;49H[K[47;17H[33mif[m(count == [31m0[m && words[i] == [31m"exit"[m)[48;17H{[48;20H[K[49;17H   exit([31m1[m);[50;17H}[50;18H[K[51;17Hlist[count] = [33mnew[m [32mchar[m[[9Csize()+[31m1[m];[51;59H[K[52;17Hcopy(words[i].begin(), words[i].end(), list[count]);[53;17Hlist[count][words[i].size()] = [35m'\0'[m;[54;17H[K[55;17H[34m//cout << "..." << list[count] << endl;[m[56;14H   count++;[57;11H   }[30;22H[?12l[?25h[?25li[58;192H9-19[30;23H[?12l[?25h[?25l[33mif[m[58;192H10-20[30;24H[?12l[?25h[?25l([58;188H[K[58;188H161,11-21     92%[30;25H[?12l[?25h[27m[m[H[2J[?25l[1;1H[33m133 [m[9C{
[33m134 [m[14C[34m// execute the command[m
[33m135 [m[14Cpid_t pid;
[33m136 [m[14C[32mint[m status = [31m0[m;
[33m137 [m[14Cpid = fork();
[33m138 
139 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m140 [m[14C{
[33m141 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m142 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m143 [m[14C}
[33m144 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m145 [m[14C{
[33m146 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m147 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m148 [m[17Clist[count] = [31mNULL[m;
[33m149 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m150 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m151 [m[17C{
[33m152 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m153 [m[20Cexit([31m1[m); [34m// dip[m
[33m154 [m[17C}
[33m155 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m156 
157 [m[14C}
[33m158 [14Celse[m [34m// parent process---wait until the child is done[m
[33m159 [m[14C{
[33m160 [m[17C[32mint[m x =   waitpid(-[31m1[m, &status, [31m0[m);
[33m161 [17Cif[m(
[33m162 [m[18C[34m//cout << "THE STATUS: " << status << endl;[m
[33m163 [17Cif[m(words[i] == [31m"&&"[m && (status > [31m0[m))
[33m164 [21Cbreak[m;
[33m165 
166 [18Cif[m(words[i] == [31m"||"[m && (status <= [31m0[m))
[33m167 [21Cbreak[m;
[33m168 [m[14C}
[33m169 
170 [m[15C[34m// reset the list[m
[33m171 [15Cfor[m([32mint[m j = [31m0[m; j < count; j++) {
[33m172 [m[18Clist[j] = [31mNULL[m;
[33m173 [m[15C}
[33m174 [m[15Ccount = [31m0[m;
[33m175 [m[9C}
[33m176 [9Celse[m {
[33m177 [m[12C[34m//cout << "Adding word" << endl;[m
[33m178 [12Cif[m(count == [31m0[m && words[i] == [31m"exit"[m)
[33m179 [m[12C{
[33m180 [m[15Cexit([31m1[m);
[33m181 [m[12C}
[33m182 [m[12Clist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];
[33m183 [m[12Ccopy(words[i].begin(), words[i].end(), list[count]);
[33m184 [m[12Clist[count][words[i].size()] = [35m'\0'[m;
[33m185 
186 [m[12C[34m//cout << "..." << list[count] << endl;[m
[33m187 [m[12Ccount++;
[33m188 [m[9C}
[1m-- INSERT --[m[175C161,11-21     92%[29;25H[?12l[?25h[27m[m[H[2J[?25l[1;1H[33m132 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m133 [m[9C{
[33m134 [m[14C[34m// execute the command[m
[33m135 [m[14Cpid_t pid;
[33m136 [m[14C[32mint[m status = [31m0[m;
[33m137 [m[14Cpid = fork();
[33m138 
139 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m140 [m[14C{
[33m141 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m142 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m143 [m[14C}
[33m144 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m145 [m[14C{
[33m146 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m147 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m148 [m[17Clist[count] = [31mNULL[m;
[33m149 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m150 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m151 [m[17C{
[33m152 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m153 [m[20Cexit([31m1[m); [34m// dip[m
[33m154 [m[17C}
[33m155 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m156 
157 [m[14C}
[33m158 [14Celse[m [34m// parent process---wait until the child is done[m
[33m159 [m[14C{
[33m160 [m[17C[32mint[m x =   waitpid(-[31m1[m, &status, [31m0[m);
[33m161 [17Cif[m(
[33m162 [m[18C[34m//cout << "THE STATUS: " << status << endl;[m
[33m163 [17Cif[m(words[i] == [31m"&&"[m && (status > [31m0[m))
[33m164 [21Cbreak[m;
[33m165 
166 [18Cif[m(words[i] == [31m"||"[m && (status <= [31m0[m))
[33m167 [21Cbreak[m;
[33m168 [m[14C}
[33m169 
170 [m[15C[34m// reset the list[m
[33m171 [15Cfor[m([32mint[m j = [31m0[m; j < count; j++) {
[33m172 [m[18Clist[j] = [31mNULL[m;
[33m173 [m[15C}
[33m174 [m[15Ccount = [31m0[m;
[33m175 [m[9C}
[33m176 [9Celse[m {
[33m177 [m[12C[34m//cout << "Adding word" << endl;[m
[33m178 [12Cif[m(count == [31m0[m && words[i] == [31m"exit"[m)
[33m179 [m[12C{
[33m180 [m[15Cexit([31m1[m);
[33m181 [m[12C}
[33m182 [m[12Clist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];
[33m183 [m[12Ccopy(words[i].begin(), words[i].end(), list[count]);
[33m184 [m[12Clist[count][words[i].size()] = [35m'\0'[m;
[33m185 
186 [m[12C[34m//cout << "..." << list[count] << endl;[m
[33m187 [m[12Ccount++;
[33m188 [m[9C}
[1m-- INSERT --[m[175C161,11-21     92%[30;25H[?12l[?25h[?25lL[58;193H2-22[30;26H[?12l[?25h[?25l6[58;193H3-23[30;27H[?12l[?25h[?25l0[58;193H4-24[30;28H[?12l[?25h[?25l[30;27H[K[58;193H3-23[30;27H[?12l[?25h[?25l[30;26H[K[58;193H2-22[30;26H[?12l[?25h[?25l[30;25H[K[58;188H[K[58;188H161,11-21     92%[30;25H[?12l[?25h[58;1H[K[30;24H[?25l[58;188H161,10-20     92%[30;24H[?12l[?25h[?25l[58;190H2,8-20 [31;24H[?12l[?25h[?25l[58;190H1,10-20[30;24H[?12l[?25h[?25l[58;190H0[29;24H[?12l[?25h[?25lin x = waitpid(-[31m1[m, &status, [31m0[m);[29;53H[K[29;24H[?12l[?25h[?25lx = [?12l[?25h[?25l = [?12l[?25h[?25l= waitpid(-[31m1[m, &status, [31m0[m);[29;50H[K[29;24H[?12l[?25h[?25l [58;196H1[29;25H[?12l[?25h[?25lwaitpid(-[31m1[m, &status, [31m0[m);[29;48H[K[58;196H0[29;24H[?12l[?25h[?25l[58;192H9-19 [29;23H[?12l[?25h[?25l[58;192H8-18[29;22H[?12l[?25h[?25lnwaitpid(-[31m1[m, &status, [31m0[m);[29;47H[K[29;22H[?12l[?25h[?25lwaitpid(-[31m1[m, &status, [31m0[m);[29;46H[K[29;22H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 198L, 4955C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:127:30: error: ISO C++ forbids variable length array â€˜listâ€™ [-Werror=vla]
   char* list[totalWordCount+1]; // +1 for null
                              ^
exec.cpp:163:8: error: expected primary-expression before â€˜ifâ€™
        if(words[i] == "&&" && (status > 0))
        ^
exec.cpp:163:8: error: expected â€˜)â€™ before â€˜ifâ€™
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 198L, 4955C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h6[?25l[?12l[?25h3[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m135 [m[14Cpid_t pid;
[33m136 [m[14C[32mint[m status = [31m0[m;
[33m137 [m[14Cpid = fork();
[33m138 
139 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m140 [m[14C{
[33m141 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m142 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m143 [m[14C}
[33m144 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m145 [m[14C{
[33m146 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m147 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m148 [m[17Clist[count] = [31mNULL[m;
[33m149 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m150 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m151 [m[17C{
[33m152 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m153 [m[20Cexit([31m1[m); [34m// dip[m
[33m154 [m[17C}
[33m155 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m156 
157 [m[14C}
[33m158 [14Celse[m [34m// parent process---wait until the child is done[m
[33m159 [m[14C{
[33m160 [m[17Cwaitpid(-[31m1[m, &status, [31m0[m);
[33m161 [17Cif[m(
[33m162 [m[18C[34m//cout << "THE STATUS: " << status << endl;[m
[33m163 [17Cif[m(words[i] == [31m"&&"[m && (status > [31m0[m))
[33m164 [21Cbreak[m;
[33m165 
166 [18Cif[m(words[i] == [31m"||"[m && (status <= [31m0[m))
[33m167 [21Cbreak[m;
[33m168 [m[14C}
[33m169 
170 [m[15C[34m// reset the list[m
[33m171 [15Cfor[m([32mint[m j = [31m0[m; j < count; j++) {
[33m172 [m[18Clist[j] = [31mNULL[m;
[33m173 [m[15C}
[33m174 [m[15Ccount = [31m0[m;
[33m175 [m[9C}
[33m176 [9Celse[m {
[33m177 [m[12C[34m//cout << "Adding word" << endl;[m
[33m178 [12Cif[m(count == [31m0[m && words[i] == [31m"exit"[m)
[33m179 [m[12C{
[33m180 [m[15Cexit([31m1[m);
[33m181 [m[12C}
[33m182 [m[12Clist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];
[33m183 [m[12Ccopy(words[i].begin(), words[i].end(), list[count]);
[33m184 [m[12Clist[count][words[i].size()] = [35m'\0'[m;
[33m185 
186 [m[12C[34m//cout << "..." << list[count] << endl;[m
[33m187 [m[12Ccount++;
[33m188 [m[9C}
[33m189 [m      }
[33m190 
191 [m      [34m//list[totalWordCount] = NULL;[m[58;188H163,8-18      95%[29;22H[?12l[?25h[?25l[58;190H4[30;22H[?12l[?25h[?25l[58;190H5,0-1 [31;5H[?12l[?25h[?25l[58;190H4,8-18[30;22H[?12l[?25h[?25l[58;190H3[29;22H[?12l[?25h[?25l[58;190H2,6[28;22H[?12l[?25h[?25l[58;190H1,8[27;22H[?12l[?25h[?25l [34m//cout << "THE STATUS: " << status << endl;[m[28;22H[33mif[m(words[i] == [31m"&&"[m && (status > [31m0[m))[28;58H[K[29;22H    [33mbreak[m;[29;32H[K[30;26H[K[31;23H[33mif[m(words[i] == [31m"||"[m && (status <= [31m0[m))[32;23H   [33mbreak[m;[32;32H[K[33;19H}[33;26H[K[34;19H[K[35;20H[34m// reset the list[m[36;20H[33mfor[m([32mint[m j = [31m0[m; j < count; j++) {[37;20H   list[j] = [31mNULL[m;[37;39H[K[38;20H}[38;23H[K[39;20Hcount = [31m0[m;[40;14H}[40;20H[K[41;14H[33melse[m {[42;14H   [34m//cout << "Adding word" << endl;[m[43;17H[33mif[m(count == [31m0[m && words[i] == [31m"exit"[m)[44;17H{[44;18H[K[45;17H   exit([31m1[m);[46;17H}[46;20H[K[47;17Hlist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];[48;17Hcopy(words[i].begin(), [9Cend(), list[count]);[49;17Hlist[count][words[i].size()] = [35m'\0'[m;[49;53H[K[50;17H[K[51;17H[34m//cout << "..." << list[count] << endl;[m[52;17Hcount++;[52;25H[K[53;14H}[53;17H[K[54;11H}[54;14H[K[55;11H[K[56;11H[34m//list[totalWordCount] = NULL;[m[57;11HtotalWordCount = [31m0[m;        [57;38H[K[58;192H7-19[27;23H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 197L, 4944C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:127:30: error: ISO C++ forbids variable length array â€˜listâ€™ [-Werror=vla]
   char* list[totalWordCount+1]; // +1 for null
                              ^
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 197L, 4944C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;188H2[2;5H[?12l[?25h[?25l[58;188H3[3;5H[?12l[?25h[?25l[58;188H4[4;5H[?12l[?25h[?25l[58;188H5[5;5H[?12l[?25h[?25l[58;188H6[6;5H[?12l[?25h[?25l[58;188H7[7;5H[?12l[?25h[?25l[58;188H8[8;5H[?12l[?25h[?25l[58;188H9[9;5H[?12l[?25h[?25l[58;188H10,0-1[10;5H[?12l[?25h[?25l[58;189H1,1  [11;5H[?12l[?25h[?25l[58;189H2,0-1[12;5H[?12l[?25h[?25l[58;189H3,1  [13;5H[?12l[?25h[?25l[58;189H4[14;5H[?12l[?25h[?25l[58;189H5[15;5H[?12l[?25h[?25l[16;5H[46m{[19;5H}[m[58;189H6[16;5H[?12l[?25h[?25l{[19;5H}[58;189H7,1-3[17;7H[?12l[?25h[?25l[58;189H8[18;7H[?12l[?25h[?25l[16;5H[46m{[19;5H}[m[58;189H9,1  [19;5H[?12l[?25h[?25l[16;5H{[19;5H}[58;188H20,0-1[20;5H[?12l[?25h[?25l[58;189H1,1  [21;5H[?12l[?25h[?25l[58;189H2,1-3[22;7H[?12l[?25h[?25l[58;189H3[23;7H[?12l[?25h[?25l[58;189H4[24;7H[?12l[?25h[?25l[58;189H5[25;7H[?12l[?25h[?25l[58;189H6[26;7H[?12l[?25h[?25l[58;189H7[27;7H[?12l[?25h[?25l[58;189H8[28;7H[?12l[?25h[?25l[58;189H9[29;7H[?12l[?25h[?25l[58;188H30[30;7H[?12l[?25h[?25l[58;189H1,0-1[31;5H[?12l[?25h[?25l[58;189H2,1-3[32;7H[?12l[?25h[?25l[58;189H3,1  [33;5H[?12l[?25h[?25l[58;189H4,0-1[34;5H[?12l[?25h[?25l[58;189H5,1  [35;5H[?12l[?25h[?25l[58;189H6[36;5H[?12l[?25h[?25l[58;189H7,1-3[37;7H[?12l[?25h[?25l[58;189H8,0-1[38;5H[?12l[?25h[?25l[58;189H9,1-3[39;7H[?12l[?25h[?25l[58;188H40[40;7H[?12l[?25h[?25l[58;189H1,0-1[41;5H[?12l[?25h[?25l[58;189H2,1-3[42;7H[?12l[?25h[?25l[58;189H3[43;7H[?12l[?25h[?25l[58;1H[K[58;1H:[?12l[?25h6[?25l[?12l[?25h9[?25l[?12l[?25h[?25l[1;57r[1;1H[12M[1;58r[46;1H[33m 58 [m      {
[33m 59 [m[9C[34m//prnt("Found a space");[m
[33m 60 
 61 [m[9C[34m// check if this space matters at all.. eg: " echo..." should be "echo ..."[m
[33m 62 [9Cif[m(!word.empty() && word != [31m""[m && word != [31m" "[m) {
[33m 63 [m[12C[34m// add the word we have and reset it[m
[33m 64 [m[12Cv.push_back(word);
[33m 65 [m[9C[34m// cout << "word: " << word << "." << endl;[m
[33m 66 [m[12Cword = [31m""[m;
[33m 67 [m[12CtotalWordCount++;
[33m 68 [m[12Cprnt([31m"Delete worked fine"[m);
[33m 69 [m[58;1H[K[58;188H69,0-1[9C8%[57;5H[?12l[?25h[?25l[58;189H8,1-3[56;7H[?12l[?25h[?25l[58;189H9,0-1[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 70 [m[9C}[58;188H[K[58;188H70,1-3[9C9%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 71 [9Celse[m { prnt([31m"hi"[m);  } [34m// to stop the wordCnt++ [m[58;188H[K[58;188H71,1-3[8C10%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 72 [m      }[58;188H[K[58;188H72,1-3[8C10%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 73 [m      [33melse[m [33mif[m(input.at(cnt) == [31m';'[m) [34m// delimiter #2 - semicolon[m[58;188H[K[58;188H73,1-3[8C11%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 74 [m      {[58;188H[K[58;188H74,1-3[8C12%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 75 [9Cif[m(word != [31m""[m && word != [31m" "[m) {[58;188H[K[58;188H75,1-3[8C12%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 76 [m[12Cv.push_back(word); [34m// push back w/e word we have[m[58;188H[K[58;188H76,1-3[8C13%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 77 [m[12CtotalWordCount++;[58;188H[K[58;188H77,1-3[8C14%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 78 [m[9C}[58;188H[K[58;188H78,1-3[8C15%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 79 [m[9Cv.push_back([31m";"[m); [34m// then add a semicolon [as a new 'word' or element in the vector][m[58;188H[K[58;188H79,1-3[8C15%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 80 [m[9Cword = [31m""[m; [34m// reset word[m[58;188H[K[58;188H80,1-3[8C16%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 81 [m      }[58;188H[K[58;188H81,1-3[8C17%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 82 [m      [33melse[m[58;188H[K[58;188H82,1-3[8C17%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 83 [m      {[58;188H[K[58;188H83,1-3[8C18%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 84 [m[9Cprnt([31m"Found a normal character"[m);[58;188H[K[58;188H84,1-3[8C19%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 85 [m[58;188H[K[58;188H85,1-3[8C20%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 86 [m[9Cword += input.at(wordCnt);[58;188H[K[58;188H86,1-3[8C20%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 87 [m[9C[34m//cout << "kk: "  << word << endl;[m[58;188H[K[58;188H87,1-3[8C21%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 88 [m      }[58;188H[K[58;188H88,1-3[8C22%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 89 [m[9CwordCnt++;[58;188H[K[58;188H89,1-3[8C22%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 90 [m[9Ccnt++;[58;188H[K[58;188H90,1-3[8C23%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 91 [m   }[58;188H[K[58;188H91,1-3[8C24%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 92 [m[58;188H[K[58;188H92,1-3[8C25%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m[58;188H[K[58;188H93,1-3[8C25%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)[58;188H[K[58;188H94,1-3[8C26%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 95 [m   {[58;188H[K[58;188H95,1-3[8C27%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 96 [m      v.push_back(word);[58;188H[K[58;188H96,1-3[8C27%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 97 [m      [33mif[m(word != [31m";"[m)[58;188H[K[58;188H97,1-3[8C28%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 98 [m      {[58;188H[K[58;188H98,1-3[8C29%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 99 [m[9Cv.push_back([31m";"[m);[58;188H[K[58;188H99,1-3[8C30%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m100 [m      }[58;188H[K[58;188H100,1-3[7C30%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m101 [m      totalWordCount++;[58;188H[K[58;188H101,1-3[7C31%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m102 [m   }[58;188H[K[58;188H102,1-3[7C32%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m103 [m   totalWordCount++;[58;188H[K[58;188H103,1-3[7C32%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m104 [m[58;188H[K[58;188H104,1-3[7C33%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }[58;188H[K[58;188H105,1-3[7C34%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m106 [m   totalWordCount = v.size();[58;188H[K[58;188H106,1-3[7C35%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m107 [m   [33mreturn[m v;[58;188H[K[58;188H107,1-3[7C35%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m108 [m}[58;188H[K[58;188H108,1[9C36%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m109 [m[58;188H[K[58;188H109,0-1[7C37%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)[58;188H[K[58;188H110,1[9C37%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m111 [m{[58;188H[K[58;188H111,1[9C38%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m[58;188H[K[58;188H112,1-3[7C39%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m113 [m   string input;[58;188H[K[58;188H113,1-3[7C40%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m114 [m   [32mbool[m cont = [31mtrue[m;[58;188H[K[58;188H114,1-3[7C40%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m115 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m[58;188H[K[58;188H115,1-3[7C41%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m116 [m   {[58;188H[K[58;188H116,1-3[7C42%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m117 [m      [34m// Print prompt[m[58;188H[K[58;188H117,1-3[7C42%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m118 [m      cout << [31m"$ "[m;[58;188H[K[58;188H118,1-3[7C43%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m119 [m[58;188H[K[58;188H119,0-1[7C44%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m120 [m      [34m// Wait for input[m[58;188H[K[58;188H120,1-3[7C45%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m121 [m      std::getline (std::cin, input);[58;188H[K[58;188H121,1-3[7C45%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m122 [m[58;188H[K[58;188H122,0-1[7C46%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m123 [m      [34m// get string, then convert it to a c* array[m[58;188H[K[58;188H123,1-3[7C47%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m124 [m      vector<string> words = tokenize(input);[58;188H[K[58;188H124,1-3[7C47%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m125 [m      [34m//cout << "wordsCnt: " << words.size();[m[58;188H[K[58;188H125,1-3[7C48%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m126 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[58;188H[K[58;188H126,1-3[7C49%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m127 [m      [32mchar[m* list[totalWordCount+[31m1[m]; [34m// +1 for null[m[58;188H[K[58;188H127,1-3[7C50%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m128 [m      [32mint[m count = [31m0[m;[58;188H[K[58;188H128,1-3[7C50%[57;7H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h7[?25l[?12l[?25h[?25l[187C127,3-7[7C50%[56;11H[?12l[?25h[?25l

[1m-- INSERT --[m[58;188H[K[58;188H127,3-7[7C50%[56;11H[K[57;11H[32mchar[m* list[totalWordCount+[31m1[m]; [34m// +1 for null[56;11H[?12l[?25h[?25l[mc[58;192H4-8[56;12H[?12l[?25h[?25lon[58;192H6-10[56;14H[?12l[?25h[?25ls[58;192H7-11[56;15H[?12l[?25h[?25l[32mconst[m[58;192H8-12[56;16H[?12l[?25h[?25l[58;192H9-13[56;17H[?12l[?25h[?25li[58;192H10-14[56;18H[?12l[?25h[?25ln[58;193H1-15[56;19H[?12l[?25h[?25l[32mint[m[58;193H2-16[56;20H[?12l[?25h[?25l[58;193H3-17[56;21H[?12l[?25h[?25lf[58;193H4-18[56;22H[?12l[?25h[?25ln[58;193H5-19[56;23H[?12l[?25h[?25l[56;22H[K[58;193H4-18[56;22H[?12l[?25h[?25li[58;193H5-19[56;23H[?12l[?25h[?25ln[58;193H6-20[56;24H[?12l[?25h[?25la[58;193H7-21[56;25H[?12l[?25h[?25l[32mfinal[m[58;193H8-22[56;26H[?12l[?25h[?25lfinalC[58;193H9-23[56;27H[?12l[?25h[?25lo[58;192H20-24[56;28H[?12l[?25h[?25lu[58;193H1-25[56;29H[?12l[?25h[?25ln[58;193H2-26[56;30H[?12l[?25h[?25l[56;29H[K[58;193H1-25[56;29H[?12l[?25h[?25l[56;28H[K[58;193H0-24[56;28H[?12l[?25h[?25l[56;27H[K[58;192H19-23[56;27H[?12l[?25h[?25l[32mfinal[m[56;26H[K[58;193H8-22[56;26H[?12l[?25h[?25lfinalW[58;193H9-23[56;27H[?12l[?25h[?25lo[58;192H20-24[56;28H[?12l[?25h[?25lr[58;193H1-25[56;29H[?12l[?25h[?25ld[58;193H2-26[56;30H[?12l[?25h[?25lC[58;193H3-27[56;31H[?12l[?25h[?25lo[58;193H4-28[56;32H[?12l[?25h[?25lu[58;193H5-29[56;33H[?12l[?25h[?25ln[58;193H6-30[56;34H[?12l[?25h[?25lt[58;193H7-31[56;35H[?12l[?25h[?25l[58;193H8-32[56;36H[?12l[?25h[?25l=[58;193H9-33[56;37H[?12l[?25h[?25l[58;192H30-34[56;38H[?12l[?25h[?25lt[58;193H1-35[56;39H[?12l[?25h[?25lo[58;193H2-36[56;40H[?12l[?25h[?25lt[58;193H3-37[56;41H[?12l[?25h[?25la[58;193H4-38[56;42H[?12l[?25h[?25ll[58;193H5-39[56;43H[?12l[?25h[?25lW[58;193H6-40[56;44H[?12l[?25h[?25lo[58;193H7-41[56;45H[?12l[?25h[?25lr[58;193H8-42[56;46H[?12l[?25h[?25ld[58;193H9-43[56;47H[?12l[?25h[?25lC[58;192H40-44[56;48H[?12l[?25h[?25lo[58;193H1-45[56;49H[?12l[?25h[?25lu[58;193H2-46[56;50H[?12l[?25h[?25ln[58;193H3-47[56;51H[?12l[?25h[?25lt[58;193H4-48[56;52H[?12l[?25h[?25l+[58;193H5-49[56;53H[?12l[?25h[?25l[31m1[m[58;193H6-50[56;54H[?12l[?25h[?25l;[58;193H7-51[56;55H[?12l[?25h[58;1H[K[56;54H[?25l[58;188H127,46-50     50%[56;54H[?12l[?25h[?25l[58;190H8[57;54H[?12l[?25h[?25l[58;193H3-47[57;51H[?12l[?25h[?25l[58;192H39-43[57;47H[?12l[?25h[?25l[58;193H7-41[57;45H[?12l[?25h[?25l[58;193H6-40[57;44H[?12l[?25h[?25l[58;193H3-37[57;41H[?12l[?25h[?25l[57;21H[46m[[16C][m[58;193H0-34[57;38H[?12l[?25h[?25l[57;21H[[16C][58;192H29-33[57;37H[?12l[?25h[?25l[58;193H8-32[57;36H[?12l[?25h[?25l[58;192H14-18[57;22H[?12l[?25h[?25l[46m[[16C][m[58;193H3-17[57;21H[?12l[?25h[?25l[[16C][58;193H4-18[57;22H[?12l[?25h[?25l
[1m-- INSERT --[m[58;188H[K[58;188H128,14-18     50%[57;22H+[31m1[m]; [34m// +1 for null[m[57;41H[K[57;21H[46m[[2C][m[58;188H[K[58;188H128,14-18     50%[57;22H[?12l[?25h[?25lt+[31m[46m1[m]; [1C[34m/ +1 for null[m[57;21H[t+[31m1[m[58;193H5-19[57;23H[?12l[?25h[?25lo+[31m1[m]; [1C[34m/ +1 for null[m[58;193H6-20[57;24H[?12l[?25h[?25lt+[31m1[m]; [1C[34m/ +1 for null[m[58;193H7-21[57;25H[?12l[?25h[?25la+[31m1[m]; [1C[34m/ +1 for null[m[58;193H8-22[57;26H[?12l[?25h[?25ll+[31m1[m]; [1C[34m/ +1 for null[m[58;193H9-23[57;27H[?12l[?25h[?25l+[31m1[m]; [34m// +1 for nul[m[57;45H[K[58;193H8-22[57;26H[?12l[?25h[?25l+[31m1[m]; [34m// +1 for nul[m[57;44H[K[58;193H7-21[57;25H[?12l[?25h[?25l+[31m1[m]; [34m// +1 for nul[m[57;43H[K[58;193H6-20[57;24H[?12l[?25h[?25l+[31m1[m]; [34m// +1 for nul[m[57;42H[K[58;193H5-19[57;23H[?12l[?25h[?25l+[31m1[m]; [34m// +1 for nul[m[57;41H[K[57;21H[46m[[2C][m[58;188H[K[58;188H128,14-18     50%[57;22H[?12l[?25h[?25lf+[31m[46m1[m]; [1C[34m/ +1 for null[m[57;21H[f+[31m1[m[58;193H5-19[57;23H[?12l[?25h[?25li+[31m1[m]; [1C[34m/ +1 for null[m[58;193H6-20[57;24H[?12l[?25h[?25ln+[31m1[m]; [1C[34m/ +1 for null[m[58;193H7-21[57;25H[?12l[?25h[?25la+[31m1[m]; [1C[34m/ +1 for null[m[58;193H8-22[57;26H[?12l[?25h[?25l[32mfinal[m+[31m1[m]; [1C[34m/ +1 for null[m[58;193H9-23[57;27H[?12l[?25h[?25lfinalW+[31m1[m]; [1C[34m/ +1 for null[m[58;192H20-24[57;28H[?12l[?25h[?25lo+[31m1[m]; [1C[34m/ +1 for null[m[58;193H1-25[57;29H[?12l[?25h[?25lr+[31m1[m]; [1C[34m/ +1 for null[m[58;193H2-26[57;30H[?12l[?25h[?25ld+[31m1[m]; [1C[34m/ +1 for null[m[58;193H3-27[57;31H[?12l[?25h[?25lC+[31m1[m]; [1C[34m/ +1 for null[m[58;193H4-28[57;32H[?12l[?25h[?25lo+[31m1[m]; [1C[34m/ +1 for null[m[58;193H5-29[57;33H[?12l[?25h[?25lu+[31m1[m]; [1C[34m/ +1 for null[m[58;193H6-30[57;34H[?12l[?25h[?25ln+[31m1[m]; [1C[34m/ +1 for null[m[58;193H7-31[57;35H[?12l[?25h[?25lt+[31m1[m]; [1C[34m/ +1 for null[m[58;193H8-32[57;36H[?12l[?25h[58;1H[K[57;35H[?25l[58;188H128,27-31     50%[57;35H[?12l[?25h[?25l[58;193H8-32[57;36H[?12l[?25h[?25l1]; [34m// +1 for nul[m[57;54H[K[57;36H[?12l[?25h[?25l[57;21H[46m[[15C][m[58;193H9-33[57;37H[?12l[?25h[?25l[57;21H[[15C[1m[37m[41m;[m [34m// +1 for nul[m[57;53H[K[57;37H[?12l[?25h[?25l[58;193H8-32[57;36H[?12l[?25h[?25l[57;21H[46m[[14C][m; [?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 198L, 4989C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:128:28: error: ISO C++ forbids variable length array â€˜listâ€™ [-Werror=vla]
   char* list[finalWordCount]; // +1 for null
                            ^
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 198L, 4989C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m 92 
 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m
[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)
[33m 95 [m   {
[33m 96 [m      v.push_back(word);
[33m 97 [m      [33mif[m(word != [31m";"[m)
[33m 98 [m      {
[33m 99 [m[9Cv.push_back([31m";"[m);
[33m100 [m      }
[33m101 [m      totalWordCount++;
[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m116 [m   {
[33m117 [m      [34m// Print prompt[m
[33m118 [m      cout << [31m"$ "[m;
[33m119 
120 [m      [34m// Wait for input[m
[33m121 [m      std::getline (std::cin, input);
[33m122 
123 [m      [34m// get string, then convert it to a c* array[m
[33m124 [m      vector<string> words = tokenize(input);
[33m125 [m      [34m//cout << "wordsCnt: " << words.size();[m
[33m126 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m
[33m127 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;
[33m128 [m      [32mchar[m* list[finalWordCount]; [34m// +1 for null[m
[33m129 [m      [32mint[m count = [31m0[m;
[33m130 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)
[33m131 [m      {
[33m132 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m
[33m133 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m134 [m[9C{
[33m135 [m[14C[34m// execute the command[m
[33m136 [m[14Cpid_t pid;
[33m137 [m[14C[32mint[m status = [31m0[m;
[33m138 [m[14Cpid = fork();
[33m139 
140 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m141 [m[14C{
[33m142 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m143 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m144 [m[14C}
[33m145 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m146 [m[14C{
[33m147 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m148 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m[58;188H120,3-7[7C64%[29;11H[?12l[?25h[?25l[58;190H1[30;11H[?12l[?25h[?25l[58;190H2,0-1[31;5H[?12l[?25h[?25l[58;190H1,3-7[30;11H[?12l[?25h[?25l[58;190H2,0-1[31;5H[?12l[?25h[?25l[58;190H3,3-7[32;11H[?12l[?25h[?25l[58;190H4[33;11H[?12l[?25h[?25l[58;190H5[34;11H[?12l[?25h[?25l[58;190H6[35;11H[?12l[?25h[?25l[58;190H7[36;11H[?12l[?25h[?25l[58;190H8[37;11H[?12l[?25h[?25l[58;192H7-11[37;15H[?12l[?25h[?25l[58;192H9-13[37;17H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H128,9-13      64%[37;17H[?12l[?25h[58;1H[K[37;16H[?25l[58;188H128,8-12      64%[37;16H[?12l[?25h[?25l[58;192H9-13[37;17H[?12l[?25h[?25l[58;192H10-14[37;18H[?12l[?25h[?25l[58;193H1-15[37;19H[?12l[?25h[?25l[58;193H2-16[37;20H[?12l[?25h[?25lt[46m[[14C][m[58;193H3-17[37;21H[?12l[?25h[?25l[37;21H[K[58;193H2-16[37;20H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H128,13-17     64%[37;21H[?12l[?25h[?25l[58;193H4-18[37;22H[?12l[?25h[?25l=[58;193H5-19[37;23H[?12l[?25h[?25l[58;193H6-20[37;24H[?12l[?25h[?25ln[58;193H7-21[37;25H[?12l[?25h[?25le[58;193H8-22[37;26H[?12l[?25h[?25l[33mnew[m[58;193H9-23[37;27H[?12l[?25h[?25l[58;192H20-24[37;28H[?12l[?25h[?25lc[58;193H1-25[37;29H[?12l[?25h[?25lh[58;193H2-26[37;30H[?12l[?25h[?25la[58;193H3-27[37;31H[?12l[?25h[?25l[32mchar[m[58;193H4-28[37;32H[?12l[?25h[?25l[[38;24H[1m[37m[41m;[40;11H{[43;14H{[45;28H;[46;33H;[47;31H;[50;19H{[51;60H;[52;29H;[53;19H}[55;19H{[m[58;188H[K[58;188H128,25-29     64%[37;33H[?12l[?25h[?25lf[58;193H6-30[37;34H[?12l[?25h[?25li[58;193H7-31[37;35H[?12l[?25h[?25ln[58;193H8-32[37;36H[?12l[?25h[?25la[58;193H9-33[37;37H[?12l[?25h[?25l[32mfinal[m[58;192H30-34[37;38H[?12l[?25h[?25lfinalW[58;193H1-35[37;39H[?12l[?25h[?25lo[58;193H2-36[37;40H[?12l[?25h[?25lr[58;193H3-37[37;41H[?12l[?25h[?25ld[58;193H4-38[37;42H[?12l[?25h[?25lC[58;193H5-39[37;43H[?12l[?25h[?25lo[58;193H6-40[37;44H[?12l[?25h[?25lu[58;193H7-41[37;45H[?12l[?25h[?25ln[58;193H8-42[37;46H[?12l[?25h[?25lt[58;193H9-43[37;47H[?12l[?25h[?25l][38;24H;[40;11H{[43;14H{[45;28H;[46;33H;[47;31H;[50;19H{[51;60H;[52;29H; [53;19H}[55;19H{[37;32H[46m[[14C][m[58;188H[K[58;188H128,40-44     64%[37;48H[?12l[?25h[?25l;[37;32H[[14C][58;193H1-45[37;49H[?12l[?25h[58;1H[K[37;48H[?25l[58;188H128,40-44     64%[37;48H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 198L, 4985C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:149:20: error: converting to non-pointer type â€˜charâ€™ from NULL [-Werror=conversion-null]
        list[count] = NULL;
                    ^
exec.cpp:150:35: error: invalid conversion from â€˜charâ€™ to â€˜const char*â€™ [-fpermissive]
        int success = execvp(list[0], list);
                                   ^
exec.cpp:150:42: error: cannot convert â€˜char*â€™ to â€˜char* const*â€™ for argument â€˜2â€™ to â€˜int execvp(const char*, char* const*)â€™
        int success = execvp(list[0], list);
                                          ^
exec.cpp:172:15: error: converting to non-pointer type â€˜charâ€™ from NULL [-Werror=conversion-null]
       list[j] = NULL;
               ^
exec.cpp:182:17: error: invalid conversion from â€˜char*â€™ to â€˜charâ€™ [-fpermissive]
     list[count] = new char[words[i].size()+1];
                 ^
exec.cpp:184:32: error: invalid types â€˜char[std::basic_string<char>::size_type {aka long unsigned int}]â€™ for array subscript
     list[count][words[i].size()] = '\0';
                                ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:65:0,
                 from /usr/include/c++/4.8/vector:60,
                 from exec.cpp:3:
/usr/include/c++/4.8/bits/stl_iterator_base_types.h: In instantiation of â€˜struct std::iterator_traits<char>â€™:
/usr/include/c++/4.8/bits/stl_algobase.h:382:57:   required from â€˜_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = char*; _OI = char]â€™
/usr/include/c++/4.8/bits/stl_algobase.h:428:38:   required from â€˜_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; _OI = char]â€™
/usr/include/c++/4.8/bits/stl_algobase.h:460:17:   required from â€˜_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; _OI = char]â€™
exec.cpp:183:55:   required from here
/usr/include/c++/4.8/bits/stl_iterator_base_types.h:165:53: error: â€˜charâ€™ is not a class, struct, or union type
       typedef typename _Iterator::iterator_category iterator_category;
                                                     ^
/usr/include/c++/4.8/bits/stl_iterator_base_types.h:166:53: error: â€˜charâ€™ is not a class, struct, or union type
       typedef typename _Iterator::value_type        value_type;
                                                     ^
/usr/include/c++/4.8/bits/stl_iterator_base_types.h:167:53: error: â€˜charâ€™ is not a class, struct, or union type
       typedef typename _Iterator::difference_type   difference_type;
                                                     ^
/usr/include/c++/4.8/bits/stl_iterator_base_types.h:168:53: error: â€˜charâ€™ is not a class, struct, or union type
       typedef typename _Iterator::pointer           pointer;
                                                     ^
/usr/include/c++/4.8/bits/stl_iterator_base_types.h:169:53: error: â€˜charâ€™ is not a class, struct, or union type
       typedef typename _Iterator::reference         reference;
                                                     ^
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 198L, 4985C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h3[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m116 [m   {
[33m117 [m      [34m// Print prompt[m
[33m118 [m      cout << [31m"$ "[m;
[33m119 
120 [m      [34m// Wait for input[m
[33m121 [m      std::getline (std::cin, input);
[33m122 
123 [m      [34m// get string, then convert it to a c* array[m
[33m124 [m      vector<string> words = tokenize(input);
[33m125 [m      [34m//cout << "wordsCnt: " << words.size();[m
[33m126 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m
[33m127 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;
[33m128 [m      [32mchar[m* list = [33mnew[m [32mchar[m[finalWordCount];
[33m129 [m      [32mint[m count = [31m0[m;
[33m130 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)
[33m131 [m      {
[33m132 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m
[33m133 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m134 [m[9C{
[33m135 [m[14C[34m// execute the command[m
[33m136 [m[14Cpid_t pid;
[33m137 [m[14C[32mint[m status = [31m0[m;
[33m138 [m[14Cpid = fork();
[33m139 
140 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m141 [m[14C{
[33m142 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m143 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m144 [m[14C}
[33m145 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m146 [m[14C{
[33m147 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m148 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m149 [m[17Clist[count] = [31mNULL[m;
[33m150 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m151 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m152 [m[17C{
[33m153 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m154 [m[20Cexit([31m1[m); [34m// dip[m
[33m155 [m[17C}
[33m156 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m157 
158 [m[14C}[58;188H130,3-7[7C71%[29;11H[?12l[?25h[?25l[58;189H29[28;11H[?12l[?25h[?25l[58;190H8[27;11H[?12l[?25h[?25l[58;190H7[26;11H[?12l[?25h[?25l[58;190H8[27;11H[?12l[?25h[?25l[58;192H4-8[27;12H[?12l[?25h[?25l[58;192H5-9[27;13H[?12l[?25h[?25l[58;192H6-10[27;14H[?12l[?25h[?25l[58;192H7-11[27;15H[?12l[?25h[?25l[58;192H8-12[27;16H[?12l[?25h[?25l[58;192H9-13[27;17H[?12l[?25h[?25l[58;192H10-14[27;18H[?12l[?25h[?25l[58;193H1-15[27;19H[?12l[?25h[?25l[58;193H2-16[27;20H[?12l[?25h[?25l[58;193H3-17[27;21H[?12l[?25h[?25l[58;193H4-18[27;22H[?12l[?25h[?25l[27;22H[K[58;193H3-17[27;21H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H128,13-17     71%[27;21H[?12l[?25h[?25l[[28;24H[1m[37m[41m;[30;11H{[33;14H{[35;28H;[36;33H;[37;31H;[40;19H{[41;60H;[42;29H;[43;19H}[45;19H{[48;40H;[49;57H;[51;22H{[52;68H;[53;32H;[54;22H}[55;27H{[46C;[m [1m[37m[41m}[57;19H}[m[58;188H[K[58;188H128,14-18     71%[27;22H[?12l[?25h[?25lf[58;193H5-19[27;23H[?12l[?25h[?25li[58;193H6-20[27;24H[?12l[?25h[?25ln[58;193H7-21[27;25H[?12l[?25h[?25la[58;193H8-22[27;26H[?12l[?25h[?25l[32mfinal[m[58;193H9-23[27;27H[?12l[?25h[?25lfinalW[58;192H20-24[27;28H[?12l[?25h[?25lo[58;193H1-25[27;29H[?12l[?25h[?25lr[58;193H2-26[27;30H[?12l[?25h[?25ld[58;193H3-27[27;31H[?12l[?25h[?25lC[58;193H4-28[27;32H[?12l[?25h[?25lo[58;193H5-29[27;33H[?12l[?25h[?25lu[58;193H6-30[27;34H[?12l[?25h[?25ln[58;193H7-31[27;35H[?12l[?25h[?25lt[58;193H8-32[27;36H[?12l[?25h[?25l][28;24H;[30;11H{[33;14H{[35;28H;[36;33H;[37;31H;[40;19H{[41;60H;[42;29H; [43;19H}[45;19H{[48;40H;[49;57H;[51;22H{ [52;68H;[53;32H; [54;22H}[55;27H{ [45C; }[57;19H}[27;21H[46m[[14C][m[58;188H[K[58;188H128,29-33     71%[27;37H[?12l[?25h[?25l;[27;21H[[14C][58;192H30-34[27;38H[?12l[?25h[58;1H[K[27;37H[?25l[58;188H128,29-33     71%[27;37H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 198L, 4975C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:128:28: error: ISO C++ forbids variable length array â€˜listâ€™ [-Werror=vla]
   char* list[finalWordCount]; 
                            ^
cc1plus: all warnings being treated as errors
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 198L, 4975C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h2[?25l[?12l[?25h0[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m142 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m143 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m144 [m[14C}
[33m145 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m
[33m146 [m[14C{
[33m147 [m[17C[34m//for(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[m
[33m148 [m[17C[34m//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m
[33m149 [m[17Clist[count] = [31mNULL[m;
[33m150 [m[17C[32mint[m success = execvp(list[[31m0[m], list);
[33m151 [17Cif[m(success <= -[31m1[m) [34m// nope, it failed[m
[33m152 [m[17C{
[33m153 [m[20Cperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);
[33m154 [m[20Cexit([31m1[m); [34m// dip[m
[33m155 [m[17C}
[33m156 [17Celse[m { cout  << [31m"It succeeded..."[m << success << endl; }
[33m157 
158 [m[14C}
[33m159 [14Celse[m [34m// parent process---wait until the child is done[m
[33m160 [m[14C{
[33m161 [m[17Cwaitpid(-[31m1[m, &status, [31m0[m);
[33m162 [m[18C[34m//cout << "THE STATUS: " << status << endl;[m
[33m163 [17Cif[m(words[i] == [31m"&&"[m && (status > [31m0[m))
[33m164 [21Cbreak[m;
[33m165 
166 [18Cif[m(words[i] == [31m"||"[m && (status <= [31m0[m))
[33m167 [21Cbreak[m;
[33m168 [m[14C}
[33m169 
170 [m[15C[34m// reset the list[m
[33m171 [15Cfor[m([32mint[m j = [31m0[m; j < count; j++) {
[33m172 [m[18Clist[j] = [31mNULL[m;
[33m173 [m[15C}
[33m174 [m[15Ccount = [31m0[m;
[33m175 [m[9C}
[33m176 [9Celse[m {
[33m177 [m[12C[34m//cout << "Adding word" << endl;[m
[33m178 [12Cif[m(count == [31m0[m && words[i] == [31m"exit"[m)
[33m179 [m[12C{
[33m180 [m[15Cexit([31m1[m);
[33m181 [m[12C}
[33m182 [m[12Clist[count] = [33mnew[m [32mchar[m[words[i].size()+[31m1[m];
[33m183 [m[12Ccopy(words[i].begin(), words[i].end(), list[count]);
[33m184 [m[12Clist[count][words[i].size()] = [35m'\0'[m;
[33m185 
186 [m[12C[34m//cout << "..." << list[count] << endl;[m
[33m187 [m[12Ccount++;
[33m188 [m[9C}
[33m189 [m      }
[33m190 
191 [m      [34m//list[totalWordCount] = NULL;[m
[33m192 [m      totalWordCount = [31m0[m;
[33m193 [m   }
[33m194 [m   [33mreturn[m [31m0[m;
[33m195 [m}
[33m196 [m[34m// run rshell within rshell[m
[33m197 [m[34m// run it on local files[m
[33m198 [m[34m// LOOK INTO WAIT [m[58;188H198,1[9CBot[57;5H[?12l[?25h[?25l[58;190H7[56;5H[?12l[?25h[?25l[58;190H6[55;5H[?12l[?25h[?25l[58;190H5[54;5H[?12l[?25h[?25l[58;190H4,1-3[53;7H[?12l[?25h[?25l[58;190H3[52;7H[?12l[?25h[?25l[58;190H2[51;7H[?12l[?25h[?25l[58;190H1[50;7H[?12l[?25h[?25l[58;190H0,0-1[49;5H[?12l[?25h[?25l[58;189H89,1-3[48;7H[?12l[?25h[?25l[58;190H8[47;7H[?12l[?25h[?25l[58;190H7[46;7H[?12l[?25h[?25l[58;190H6[45;7H[?12l[?25h[?25l[58;190H5,0-1[44;5H[?12l[?25h[?25l[58;190H4,1-3[43;7H[?12l[?25h[?25l[58;190H3[42;7H[?12l[?25h[?25l[58;190H2[41;7H[?12l[?25h[?25l[58;190H1[40;7H[?12l[?25h[?25l[58;190H0[39;7H[?12l[?25h[?25l[58;189H79[38;7H[?12l[?25h[?25l[58;190H8[37;7H[?12l[?25h[?25l[58;190H7[36;7H[?12l[?25h[?25l[58;190H6[35;7H[?12l[?25h[?25l[58;190H5[34;7H[?12l[?25h[?25l[58;190H4[33;7H[?12l[?25h[?25l[58;190H3[32;7H[?12l[?25h[?25l[58;190H2[31;7H[?12l[?25h[?25l[58;190H1[30;7H[?12l[?25h[?25l[58;190H0[29;7H[?12l[?25h[?25l[58;189H69,0-1[28;5H[?12l[?25h[?25l[58;190H8,1-3[27;7H[?12l[?25h[?25l[58;190H7[26;7H[?12l[?25h[?25l[58;190H6[25;7H[?12l[?25h[?25l[58;190H5,0-1[24;5H[?12l[?25h[?25l[58;190H4,1-3[23;7H[?12l[?25h[?25l[58;190H3[22;7H[?12l[?25h[?25l[58;190H2[21;7H[?12l[?25h[?25l[58;190H1[20;7H[?12l[?25h[?25l[58;190H0[19;7H[?12l[?25h[?25l[58;189H59[18;7H[?12l[?25h[?25l[58;190H8[17;7H[?12l[?25h[?25l[58;190H7[16;7H[?12l[?25h[?25l[58;190H6[15;7H[?12l[?25h[?25l[58;190H5[14;7H[?12l[?25h[?25l[58;190H4[13;7H[?12l[?25h[?25l[58;190H3[12;7H[?12l[?25h[?25l[58;190H2[11;7H[?12l[?25h[?25l[58;190H1[10;7H[?12l[?25h[?25l[58;190H0[9;7H[?12l[?25h[?25l[58;189H49[8;7H[?12l[?25h[?25l[58;190H8[7;7H[?12l[?25h[?25l[58;190H7[6;7H[?12l[?25h[?25l[58;190H6[5;7H[?12l[?25h[?25l[58;190H5[4;7H[?12l[?25h[?25l[58;190H4[3;7H[?12l[?25h[?25l[58;190H3[2;7H[?12l[?25h[?25l[58;190H2[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m141 [m[14C{[58;188H[K[58;188H141,1-3[7C99%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m140 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m[58;188H[K[58;188H140,1-3[7C98%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m139 [m[58;188H[K[58;188H139,0-1[7C97%[1;5H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m138 [m[14Cpid = fork();[58;188H[K[58;188H138,1-3[7C97%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m137 [m[14C[32mint[m status = [31m0[m;[58;188H[K[58;188H137,1-3[7C96%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m136 [m[14Cpid_t pid;[58;188H[K[58;188H136,1-3[7C95%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m135 [m[14C[34m// execute the command[m[58;188H[K[58;188H135,1-3[7C95%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m134 [m[9C{[58;188H[K[58;188H134,1-3[7C94%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m133 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))[58;188H[K[58;188H133,1-3[7C93%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m132 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m[58;188H[K[58;188H132,1-3[7C92%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m131 [m      {[58;188H[K[58;188H131,1-3[7C92%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m130 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[58;188H[K[58;188H130,1-3[7C91%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m129 [m      [32mint[m count = [31m0[m;[58;188H[K[58;188H129,1-3[7C90%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m128 [m      [32mchar[m* list[finalWordCount];[58;188H[K[58;188H128,1-3[7C90%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m127 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[58;188H[K[58;188H127,1-3[7C89%[1;7H[?12l[?25h[?25l[1;57r[1;1H[L[1;58r[1;1H[33m126 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[58;188H[K[58;188H126,1-3[7C88%[1;7H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h8[?25l[?12l[?25h[?25l[187C128,3-7[7C88%[3;11H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H128,3-7[7C88%[3;11H[?12l[?25h[?25l/[32mchar[m* list[finalWordCount];[58;192H4-8[3;12H[?12l[?25h[?25l[34m//char* list[finalWordCount]; [m[58;192H5-9[3;13H[?12l[?25h[58;1H[K[3;12H[?25l[58;188H128,4-8[7C88%[3;12H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H129,3-7[7C88%[4;11H[K[5;11H[32mint[m count[5;26H[K[6;11H[33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[7;11H{[7;14H[K[8;14H[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m[8;73H[K[9;14H[33mif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))[10;14H{[10;19H[K[11;19H[34m// execute the command[m[12;19Hpid_t pid;[12;30H[K[13;19H[32mint[m status = [31m0[m;[14;19Hpid = fork();[15;19H[K[16;19H[33mif[m(pid <= -[31m1[m) [34m// something went wrong [m[17;19H{[17;22H[K[18;22Hperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);[19;19H   exit([31m1[m); [34m// quit the program[m[20;19H}[20;20H[K[21;19H[33melse[m [33mif[m(pid == [31m0[m) [34m// child process[m[22;19H{[22;22H[K[23;24H[34mfor(int n = 0; n < 5; n++) { cout << "k: " << list[n] << endl; }[24;22H//list[0] = "echo"; list[1] = "hi";  list[2] = NULL;[m[25;22Hlist[count] = [31mNULL[m;[25;41H[K[26;22H[32mint[m success = execvp(list[[31m0[m], list);[27;22H[33mif[m(success <= -[31m1[m) [34m// nope, it failed[m[28;22H{   [28;26H[K[29;25Hperror([31m"ERROR: EXECUTING THE CMD FAILED[m[35m\n[m[31m"[m);[30;22H   exit([31m1[m); [34m// dip[m[31;22H}[31;23H[K[32;22H[33melse[m { cout  << [31m"It succeeded..."[m << success << endl; }[33;19H [34;19H}[34;20H[K[35;19H[33melse[m [34m// parent process---wait until the child is done[m[36;19H{[36;22H[K[37;22Hwaitpid(-[31m1[m, &status, [31m0[m);[37;46H[K[38;22H [34m//cout << "THE STATUS: " << status << endl;[m[39;22H[33mif[m(words[i] == [31m"&&"[m && (status > [31m0[m))[40;26H[33mbreak[m;[41;23H[K[42;23H[33mif[m(words[i] == [31m"||"[m && (status <= [31m0[m))[43;19H       [33mbreak[m;[44;19H}[45;20H[K[46;20H[34m// reset the list[m[46;37H[K[47;20H[33mfor[m([32mint[m j = [31m0[m; j < count; j++) {[48;20H   list[j] = [31mNULL[m;[49;20H}  [49;23H[K[50;14H      count = [31m0[m;[51;14H}  [51;17H[K[52;14H[33melse[m {[52;20H[K[53;17H[34m//cout << "Adding word" << endl;[m[53;49H[K[54;17H[33mif[m(count == [31m0[m && words[i] == [31m"exit"[m)[55;17H{[55;20H[K[56;17H   exit([31m1[m);[57;17H}[57;18H[K[4;11H[?12l[?25h[?25lc[58;192H4-8[4;12H[?12l[?25h[?25lh[58;192H5-9[4;13H[?12l[?25h[?25la[58;192H6-10[4;14H[?12l[?25h[?25l[32mchar[m[58;192H7-11[4;15H[?12l[?25h[?25l[58;192H8-12[4;16H[?12l[?25h[?25l*[58;192H9-13[4;17H[?12l[?25h[?25ll[58;192H10-14[4;18H[?12l[?25h[?25li[58;193H1-15[4;19H[?12l[?25h[?25ls[58;193H2-16[4;20H[?12l[?25h[?25lt[58;193H3-17[4;21H[?12l[?25h[?25l[58;193H4-18[4;22H[?12l[?25h[?25l=[58;193H5-19[4;23H[?12l[?25h[?25l[58;193H6-20[4;24H[?12l[?25h[?25l[58;193H5-19[4;23H[?12l[?25h[?25l[4;22H[K[58;193H4-18[4;22H[?12l[?25h[?25l[58;193H3-17[4;21H[?12l[?25h[?25l[4;20H[K[58;193H2-16[4;20H[?12l[?25h[?25l[4;19H[K[58;193H1-15[4;19H[?12l[?25h[?25l[4;18H[K[58;193H0-14[4;18H[?12l[?25h[?25l[4;17H[K[58;192H9-13 [4;17H[?12l[?25h[?25l[4;16H[K[58;192H8-12[4;16H[?12l[?25h[?25l*[58;192H9-13[4;17H[?12l[?25h[?25l*[58;192H10-14[4;18H[?12l[?25h[?25ll[58;193H1-15[4;19H[?12l[?25h[?25li[58;193H2-16[4;20H[?12l[?25h[?25ls[58;193H3-17[4;21H[?12l[?25h[?25lt[58;193H4-18[4;22H[?12l[?25h[?25l[58;193H5-19[4;23H[?12l[?25h[?25l=[58;193H6-20[4;24H[?12l[?25h[?25l[58;193H7-21[4;25H[?12l[?25h[?25ln[58;193H8-22[4;26H[?12l[?25h[?25le[58;193H9-23[4;27H[?12l[?25h[?25l[33mnew[m[58;192H20-24[4;28H[?12l[?25h[?25l[58;193H1-25[4;29H[?12l[?25h[?25lc[58;193H2-26[4;30H[?12l[?25h[?25lh[58;193H3-27[4;31H[?12l[?25h[?25la[58;193H4-28[4;32H[?12l[?25h[?25l[32mchar[m[58;193H5-29[4;33H[?12l[?25h[?25l*[58;193H6-30[4;34H[?12l[?25h[?25l[[5;24H[1m[37m[41m;[7;11H{[10;14H{[12;28H;[13;33H;[14;31H;[17;19H{[18;60H;[19;29H;[20;19H}[22;19H{[25;40H;[26;57H;[28;22H{[29;68H;[30;32H;[31;22H}[32;27H{[46C;[m [1m[37m[41m}[34;19H}[36;19H{[37;45H;[40;31H;[43;31H;[44;19H}[47;51H{[48;37H;[49;20H}[50;29H;[51;14H}[52;19H{[55;17H{[56;27H;[57;17H}[m[58;188H[K[58;188H129,27-31     88%[4;35H[?12l[?25h[?25lf[58;193H8-32[4;36H[?12l[?25h[?25li[58;193H9-33[4;37H[?12l[?25h[?25ln[58;192H30-34[4;38H[?12l[?25h[?25la[58;193H1-35[4;39H[?12l[?25h[?25l[32mfinal[m[58;193H2-36[4;40H[?12l[?25h[?25lfinalW[58;193H3-37[4;41H[?12l[?25h[?25lo[58;193H4-38[4;42H[?12l[?25h[?25lr[58;193H5-39[4;43H[?12l[?25h[?25ld[58;193H6-40[4;44H[?12l[?25h[?25lC[58;193H7-41[4;45H[?12l[?25h[?25lo[58;193H8-42[4;46H[?12l[?25h[?25lu[58;193H9-43[4;47H[?12l[?25h[?25ln[58;192H40-44[4;48H[?12l[?25h[?25lt[58;193H1-45[4;49H[?12l[?25h[?25l][5;24H;[7;11H{[10;14H{[12;28H;[13;33H;[14;31H;[17;19H{[18;60H;[19;29H; [20;19H}[22;19H{[25;40H;[26;57H;[28;22H{ [29;68H;[30;32H; [31;22H}[32;27H{ [45C; }[34;19H}[36;19H{[37;45H;[40;31H;[43;31H;[44;19H}[47;51H{ [48;37H;[49;20H} [50;29H;[51;14H} [52;19H{[55;17H{[56;27H;[57;17H}[4;34H[46m[[14C][m[58;188H[K[58;188H129,42-46     88%[4;50H[?12l[?25h[58;1H[K[4;49H[?25l[58;188H129,41-45     88%[4;49H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H129,42-46     88%[58;188H[K[58;188H129,42-46     88%[4;50H[?12l[?25h[?25l;[4;34H[[14C][58;193H3-47[4;51H[?12l[?25h[58;1H[K[4;50H[?25l[58;188H129,42-46     88%[4;50H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 199L, 5020C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[Kg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K./a.out
$ echo hi world
hi world
$ echo hi  ; echo world;
hi
world
$ echo hi
hi
$ echo echo
echo
$ echo hi hi echo; echo && echo true
hi hi echo

true
$ ^[[A    ;;;;;
$ exit
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ;;;
bash: syntax error near unexpected token `;;'
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ;;;;;;;;;;
bash: syntax error near unexpected token `;;'
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ;;;;;;;;;;[K./a.out[Kg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 199L, 5020C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;188H2[2;5H[?12l[?25h[?25l[58;188H3[3;5H[?12l[?25h[?25l[58;188H4[4;5H[?12l[?25h[?25l[58;188H5[5;5H[?12l[?25h[?25l[58;188H6[6;5H[?12l[?25h[?25l[58;188H7[7;5H[?12l[?25h[?25l[58;188H8[8;5H[?12l[?25h[?25l[58;188H9[9;5H[?12l[?25h[?25l[58;188H10,0-1[10;5H[?12l[?25h[?25l[58;189H1,1  [11;5H[?12l[?25h[?25l[58;189H2,0-1[12;5H[?12l[?25h[?25l[58;189H3,1  [13;5H[?12l[?25h[?25l[58;189H4[14;5H[?12l[?25h[?25l[58;189H5[15;5H[?12l[?25h[?25l[16;5H[46m{[19;5H}[m[58;189H6[16;5H[?12l[?25h[?25l{[19;5H}[58;189H7,1-3[17;7H[?12l[?25h[?25l[58;189H8[18;7H[?12l[?25h[?25l[16;5H[46m{[19;5H}[m[58;189H9,1  [19;5H[?12l[?25h[?25l[16;5H{[19;5H}[58;188H20,0-1[20;5H[?12l[?25h[?25l[58;189H1,1  [21;5H[?12l[?25h[?25l[58;189H2,1-3[22;7H[?12l[?25h[?25l[58;189H3[23;7H[?12l[?25h[?25l[58;189H4[24;7H[?12l[?25h[?25l[58;189H5[25;7H[?12l[?25h[?25l[58;189H6[26;7H[?12l[?25h[?25l[58;189H7[27;7H[?12l[?25h[?25l[58;189H8[28;7H[?12l[?25h[?25l[58;189H9[29;7H[?12l[?25h[?25l[58;188H30[30;7H[?12l[?25h[?25l[58;189H1,0-1[31;5H[?12l[?25h[?25l[58;189H2,1-3[32;7H[?12l[?25h[?25l[58;189H3,1  [33;5H[?12l[?25h[?25l[58;189H4,0-1[34;5H[?12l[?25h[?25l[58;189H5,1  [35;5H[?12l[?25h[?25l[58;189H6[36;5H[?12l[?25h[?25l[58;189H7,1-3[37;7H[?12l[?25h[?25l[58;189H8,0-1[38;5H[?12l[?25h[?25l[58;189H9,1-3[39;7H[?12l[?25h[?25l[58;188H40[40;7H[?12l[?25h[?25l[58;189H1,0-1[41;5H[?12l[?25h[?25l[58;189H2,1-3[42;7H[?12l[?25h[?25l[58;189H3[43;7H[?12l[?25h[?25l[58;189H4[44;7H[?12l[?25h[?25l[58;189H5[45;7H[?12l[?25h[?25l[58;189H6[46;7H[?12l[?25h[?25l[58;189H7[47;7H[?12l[?25h[?25l[58;189H8[48;7H[?12l[?25h[?25l[58;189H9[49;7H[?12l[?25h[?25l[58;188H50[50;7H[?12l[?25h[?25l[58;189H1,0-1[51;5H[?12l[?25h[?25l[58;189H2,1-3[52;7H[?12l[?25h[?25l[58;189H3[53;7H[?12l[?25h[?25l[58;189H4[54;7H[?12l[?25h[?25l[58;189H5[55;7H[?12l[?25h[?25l[58;189H6[56;7H[?12l[?25h[?25l[58;189H7[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 58 [m      {[58;1H[K[58;188H58,1-3[9C0%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 59 [m[9C[34m//prnt("Found a space");[m[58;188H[K[58;188H59,1-3[9C1%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 60 [m[58;188H[K[58;188H60,1-3[9C2%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 61 [m[9C[34m// check if this space matters at all.. eg: " echo..." should be "echo ..."[m[58;188H[K[58;188H61,1-3[9C2%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 62 [9Cif[m(!word.empty() && word != [31m""[m && word != [31m" "[m) {[58;188H[K[58;188H62,1-3[9C3%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 63 [m[12C[34m// add the word we have and reset it[m[58;188H[K[58;188H63,1-3[9C4%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 64 [m[12Cv.push_back(word);[58;188H[K[58;188H64,1-3[9C4%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 65 [m[9C[34m// cout << "word: " << word << "." << endl;[m[58;188H[K[58;188H65,1-3[9C5%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 66 [m[12Cword = [31m""[m;[58;188H[K[58;188H66,1-3[9C6%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 67 [m[12CtotalWordCount++;[58;188H[K[58;188H67,1-3[9C7%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 68 [m[12Cprnt([31m"Delete worked fine"[m);[58;188H[K[58;188H68,1-3[9C7%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 69 [m[58;188H[K[58;188H69,0-1[9C8%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 70 [m[9C}[58;188H[K[58;188H70,1-3[9C9%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 71 [9Celse[m { prnt([31m"hi"[m);  } [34m// to stop the wordCnt++ [m[58;188H[K[58;188H71,1-3[9C9%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 72 [m      }[58;188H[K[58;188H72,1-3[8C10%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 73 [m      [33melse[m [33mif[m(input.at(cnt) == [31m';'[m) [34m// delimiter #2 - semicolon[m[58;188H[K[58;188H73,1-3[8C11%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 74 [m      {[58;188H[K[58;188H74,1-3[8C11%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 75 [9Cif[m(word != [31m""[m && word != [31m" "[m) {[58;188H[K[58;188H75,1-3[8C12%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 76 [m[12Cv.push_back(word); [34m// push back w/e word we have[m[58;188H[K[58;188H76,1-3[8C13%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 77 [m[12CtotalWordCount++;[58;188H[K[58;188H77,1-3[8C14%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 78 [m[9C}[58;188H[K[58;188H78,1-3[8C14%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 79 [m[9Cv.push_back([31m";"[m); [34m// then add a semicolon [as a new 'word' or element in the vector][m[58;188H[K[58;188H79,1-3[8C15%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 80 [m[9Cword = [31m""[m; [34m// reset word[m[58;188H[K[58;188H80,1-3[8C16%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 81 [m      }[58;188H[K[58;188H81,1-3[8C16%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 82 [m      [33melse[m[58;188H[K[58;188H82,1-3[8C17%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 83 [m      {[58;188H[K[58;188H83,1-3[8C18%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 84 [m[9Cprnt([31m"Found a normal character"[m);[58;188H[K[58;188H84,1-3[8C19%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 85 [m[58;188H[K[58;188H85,1-3[8C19%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 86 [m[9Cword += input.at(wordCnt);[58;188H[K[58;188H86,1-3[8C20%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 87 [m[9C[34m//cout << "kk: "  << word << endl;[m[58;188H[K[58;188H87,1-3[8C21%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 88 [m      }[58;188H[K[58;188H88,1-3[8C21%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 89 [m[9CwordCnt++;[58;188H[K[58;188H89,1-3[8C22%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 90 [m[9Ccnt++;[58;188H[K[58;188H90,1-3[8C23%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 91 [m   }[58;188H[K[58;188H91,1-3[8C23%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 92 [m[58;188H[K[58;188H92,1-3[8C24%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m[58;188H[K[58;188H93,1-3[8C25%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)[58;188H[K[58;188H94,1-3[8C26%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 95 [m   {[58;188H[K[58;188H95,1-3[8C26%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 96 [m      v.push_back(word);[58;188H[K[58;188H96,1-3[8C27%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 97 [m      [33mif[m(word != [31m";"[m)[58;188H[K[58;188H97,1-3[8C28%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 98 [m      {[58;188H[K[58;188H98,1-3[8C28%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m 99 [m[9Cv.push_back([31m";"[m);[58;188H[K[58;188H99,1-3[8C29%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m100 [m      }[58;188H[K[58;188H100,1-3[7C30%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m101 [m      totalWordCount++;[58;188H[K[58;188H101,1-3[7C30%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m102 [m   }[58;188H[K[58;188H102,1-3[7C31%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m103 [m   totalWordCount++;[58;188H[K[58;188H103,1-3[7C32%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m104 [m[58;188H[K[58;188H104,1-3[7C33%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }[58;188H[K[58;188H105,1-3[7C33%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m106 [m   totalWordCount = v.size();[58;188H[K[58;188H106,1-3[7C34%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m107 [m   [33mreturn[m v;[58;188H[K[58;188H107,1-3[7C35%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m108 [m}[58;188H[K[58;188H108,1[9C35%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m109 [m[58;188H[K[58;188H109,0-1[7C36%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)[58;188H[K[58;188H110,1[9C37%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m111 [m{[58;188H[K[58;188H111,1[9C38%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m[58;188H[K[58;188H112,1-3[7C38%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m113 [m   string input;[58;188H[K[58;188H113,1-3[7C39%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m114 [m   [32mbool[m cont = [31mtrue[m;[58;188H[K[58;188H114,1-3[7C40%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m115 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m[58;188H[K[58;188H115,1-3[7C40%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m116 [m   {[58;188H[K[58;188H116,1-3[7C41%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m117 [m      [34m// Print prompt[m[58;188H[K[58;188H117,1-3[7C42%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m118 [m      cout << [31m"$ "[m;[58;188H[K[58;188H118,1-3[7C42%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m119 [m[58;188H[K[58;188H119,0-1[7C43%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m120 [m      [34m// Wait for input[m[58;188H[K[58;188H120,1-3[7C44%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m121 [m      std::getline (std::cin, input);[58;188H[K[58;188H121,1-3[7C45%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m122 [m[58;188H[K[58;188H122,0-1[7C45%[57;5H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m123 [m      [34m// get string, then convert it to a c* array[m[58;188H[K[58;188H123,1-3[7C46%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m124 [m      vector<string> words = tokenize(input);[58;188H[K[58;188H124,1-3[7C47%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m125 [m      [34m//cout << "wordsCnt: " << words.size();[m[58;188H[K[58;188H125,1-3[7C47%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m126 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[58;188H[K[58;188H126,1-3[7C48%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m127 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[58;188H[K[58;188H127,1-3[7C49%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m128 [m      [34m//char* list[finalWordCount]; [m[58;188H[K[58;188H128,1-3[7C50%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m129 [m      [32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[58;188H[K[58;188H129,1-3[7C50%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m130 [m      [32mint[m count = [31m0[m;[58;188H[K[58;188H130,1-3[7C51%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m131 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[58;188H[K[58;188H131,1-3[7C52%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m132 [m      {[58;188H[K[58;188H132,1-3[7C52%[57;7H[?12l[?25h[?25l[1;57r[57;1H
[1;58r[57;1H[33m133 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m[58;188H[K[58;188H133,1-3[7C53%[57;7H[?12l[?25h[?25l[58;190H2[56;7H[?12l[?25h[?25l[58;190H1[55;7H[?12l[?25h[?25l[58;190H0[54;7H[?12l[?25h[?25l[58;189H29[53;7H[?12l[?25h[?25l[58;190H8[52;7H[?12l[?25h[?25l[58;190H7[51;7H[?12l[?25h[?25l[58;190H6[50;7H[?12l[?25h[?25l[58;190H5[49;7H[?12l[?25h[?25l[58;190H4[48;7H[?12l[?25h[?25l[58;190H3[47;7H[?12l[?25h[?25l[58;190H2,0-1[46;5H[?12l[?25h[?25l[58;190H1,1-3[45;7H[?12l[?25h[?25l[58;190H0[44;7H[?12l[?25h[?25l[58;189H19,0-1[43;5H[?12l[?25h[?25l[58;190H8,1-3[42;7H[?12l[?25h[?25l[58;190H7[41;7H[?12l[?25h[?25l[58;190H6[40;7H[?12l[?25h[?25l[58;190H5[39;7H[?12l[?25h[?25l[58;190H6[40;7H[?12l[?25h[?25l[58;190H7[41;7H[?12l[?25h[?25l[58;190H8[42;7H[?12l[?25h[?25l[58;190H9,0-1[43;5H[?12l[?25h[?25l[58;189H20,1-3[44;7H[?12l[?25h[?25l[58;190H1[45;7H[?12l[?25h[?25l[58;190H0[44;7H[?12l[?25h[?25l[58;189H19,0-1[43;5H[?12l[?25h[?25l[58;190H8,1-3[42;7H[?12l[?25h[?25l[58;190H7[41;7H[?12l[?25h[?25l[58;190H6[40;7H[?12l[?25h[?25l[58;190H5[39;7H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h1[?25l[?12l[?25h4[?25l[?12l[?25h[?25l[187C114,2-4[7C53%[38;8H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H115,2-4[7C53%[39;8H[K[40;8H[33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m[41;8H{[41;11H[K[42;11H[34m// Print prompt[m[43;11Hcout << [31m"$ "[m;[44;11H[K[45;11H[34m// Wait for input[m[45;28H[K[46;11Hstd::getline (std::cin, input);[47;11H[K[48;11H[34m// get string, then convert it to a c* array[m[49;11Hvector<string> words = tokenize(input);[50;13H[34mcout << "wordsCnt: " << words.size();[m[50;50H[K[51;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[52;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[53;11H[34m//char* list[finalWordCount]; [m[53;41H[K[54;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[55;11H[32mint[m count[55;26H[K[56;11H[33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[57;11H{[57;14H[K[39;8H[?12l[?25h[?25l[40;8H[K[41;8H[33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m[42;8H{[42;11H[K[43;11H[34m// Print prompt[m[44;11Hcout << [31m"$ "[m;[45;11H[K[46;11H[34m// Wait for input[m[46;28H[K[47;11Hstd::getline (std::cin, input);[48;11H[K[49;11H[34m// get string, then convert it to a c* array[m[50;11Hvector<string> words = tokenize(input);[51;13H[34mcout << "wordsCnt: " << words.size();[m[51;50H[K[52;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[53;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[54;11H[34m//char* list[finalWordCount]; [m[54;41H[K[55;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[56;11H[32mint[m count[56;26H[K[57;11H[33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[58;190H6[12C2[40;8H[?12l[?25h[34m^[m [?25l[34m^[[m[[31m3[m~[42;8H[1m[37m[41m{[44;23H;[47;41H;[50;49H;[53;54H;[55;50H;[56;24H;[m[58;192H6-9[40;13H[?12l[?25h[?25l[40;12H[K[58;192H5-8[40;12H[?12l[?25h[?25l[40;11H[K[58;188H[K[58;188H116,4-7[7C52%[40;11H[?12l[?25h[?25l[40;10H[K[42;8H{[44;23H;[47;41H;[50;49H;[53;54H;[55;50H;[56;24H;[58;192H3-6[40;10H[?12l[?25h[?25l[40;8H[K[58;192H2-4[40;8H[?12l[?25h[?25lc[58;192H3-5[40;9H[?12l[?25h[?25lh[58;192H4-6[40;10H[?12l[?25h[?25la[58;192H5-7[40;11H[?12l[?25h[?25l[32mchar[m[58;192H6-8[40;12H[?12l[?25h[?25l[58;192H7-9[40;13H[?12l[?25h[?25ln[58;192H8-10[40;14H[?12l[?25h[?25la[58;192H9-11[40;15H[?12l[?25h[?25lm[58;192H10-12[40;16H[?12l[?25h[?25le[58;193H1-13[40;17H[?12l[?25h[?25l[[42;8H[1m[37m[41m{[44;23H;[47;41H;[50;49H;[53;54H;[55;50H;[56;24H;[m[58;188H[K[58;188H116,12-14     52%[40;18H[?12l[?25h[?25l[31m1[m[58;193H3-15[40;19H[?12l[?25h[?25l[31m2[m[58;193H4-16[40;20H[?12l[?25h[?25l[31m8[m[58;193H5-17[40;21H[?12l[?25h[?25l][42;8H{[44;23H;[47;41H;[50;49H;[53;54H;[55;50H;[56;24H;[40;17H[46m[[3C][m[58;188H[K[58;188H116,16-18     52%[40;22H[?12l[?25h[?25l;[[3C][58;193H7-19[40;23H[?12l[?25h[?25l[41;8H[K[42;8H[33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m[43;8H{[43;11H[K[44;11H[34m// Print prompt[m[45;11Hcout << [31m"$ "[m;[46;11H[K[47;11H[34m// Wait for input[m[47;28H[K[48;11Hstd::getline (std::cin, input);[49;11H[K[50;11H[34m// get string, then convert it to a c* array[m[51;11Hvector<string> words = tokenize(input);[52;13H[34mcout << "wordsCnt: " << words.size();[m[52;50H[K[53;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[54;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[55;11H[34m//char* list[finalWordCount]; [m[55;41H[K[56;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[57;11H[32mint[m count[57;26H[K[58;190H7,2-4  [41;8H[?12l[?25h[?25lg[58;192H3-5[41;9H[?12l[?25h[?25le[58;192H4-6[41;10H[?12l[?25h[?25lt[58;192H5-7[41;11H[?12l[?25h[?25lh[58;192H6-8[41;12H[?12l[?25h[?25lo[58;192H7-9[41;13H[?12l[?25h[?25ls[58;192H8-10[41;14H[?12l[?25h[?25lt[58;192H9-11[41;15H[?12l[?25h[?25ln[58;192H10-12[41;16H[?12l[?25h[?25la[58;193H1-13[41;17H[?12l[?25h[?25lm[58;193H2-14[41;18H[?12l[?25h[?25le[58;193H3-15[41;19H[?12l[?25h[?25l([58;188H[K[58;188H117,14-16     52%[41;20H[?12l[?25h[?25lh[58;193H5-17[41;21H[?12l[?25h[?25lo[58;193H6-18[41;22H[?12l[?25h[?25ls[58;193H7-19[41;23H[?12l[?25h[?25lt[58;193H8-20[41;24H[?12l[?25h[?25ln[58;193H9-21[41;25H[?12l[?25h[?25la[58;192H20-22[41;26H[?12l[?25h[?25lm[58;193H1-23[41;27H[?12l[?25h[?25le[58;193H2-24[41;28H[?12l[?25h[?25l.[58;193H3-25[41;29H[?12l[?25h[?25l,[58;193H4-26[41;30H[?12l[?25h[?25l[41;29H[K[58;193H3-25[41;29H[?12l[?25h[?25l[41;28H[K[58;193H2-24[41;28H[?12l[?25h[?25l,[58;193H3-25[41;29H[?12l[?25h[?25l[58;193H4-26[41;30H[?12l[?25h[?25ls[58;193H5-27[41;31H[?12l[?25h[?25li[58;193H6-28[41;32H[?12l[?25h[?25lz[58;193H7-29[41;33H[?12l[?25h[?25le[58;193H8-30[41;34H[?12l[?25h[?25lo[58;193H9-31[41;35H[?12l[?25h[?25l[33msizeof[m[58;192H30-32[41;36H[?12l[?25h[?25l([58;188H[K[58;188H117,31-33     52%[41;37H[?12l[?25h[?25l[41;36H[K[58;193H0-32[41;36H[?12l[?25h[?25l[58;193H1-33[41;37H[?12l[?25h[?25lh[58;193H2-34[41;38H[?12l[?25h[?25lo[58;193H3-35[41;39H[?12l[?25h[?25ls[58;193H4-36[41;40H[?12l[?25h[?25lt[58;193H5-37[41;41H[?12l[?25h[?25ln[58;193H6-38[41;42H[?12l[?25h[?25la[58;193H7-39[41;43H[?12l[?25h[?25lm[58;193H8-40[41;44H[?12l[?25h[?25le[58;193H9-41[41;45H[?12l[?25h[?25l)[41;19H[46m([25C)[m[58;188H[K[58;188H117,40-42     52%[41;46H[?12l[?25h[?25l;[41;19H([25C)[58;193H1-43[41;47H[?12l[?25h[58;1H[K[41;46H[?25l[58;188H117,40-42     52%[41;46H[?12l[?25h[?25l[58;190H8[42;46H[?12l[?25h[?25l[58;190H9,2-4  [43;8H[?12l[?25h[?25l[58;189H20,17-21[44;25H[?12l[?25h[?25l[44;11Hcout << [31m"$ "[m;[44;24H[K[45;11H[K[46;11H[34m// Wait for input[m[47;11Hstd::getline (std::cin, input);[48;11H[K[49;11H[34m// get string, then convert it to a c* array[m[50;11Hvector<string> words = tokenize(input);[50;50H[K[51;11H[34m//cout << "wordsCnt: " << words.size();[52;13Hfor(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[53;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[53;55H[K[54;11H[34m//char* list[finalWordCount]; [m[54;41H[K[55;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[56;11H[32mint[m count = [31m0[m;[56;25H[K[57;11H[33mfor[m([32mint[m i[6Ci < totalWordCount; i++)[58;192H3-7  [44;11H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H120,3-7[7C52%[44;11H[K[45;11Hcout << [31m"$ "[m;[46;11H[K[47;11H[34m// Wait for input[m[47;28H[K[48;11Hstd::getline (std::cin, input);[49;11H[K[50;11H[34m// get string, then convert it to a c* array[m[51;11Hvector<string> words = tokenize(input);[52;13H[34mcout << "wordsCnt: " << words.size();[m[52;50H[K[53;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[54;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[55;11H[34m//char* list[finalWordCount]; [m[55;41H[K[56;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[57;11H[32mint[m count[57;26H[K[44;11H[?12l[?25h[?25l/[58;192H4-8[44;12H[?12l[?25h[?25l[34m//[m[58;192H5-9[44;13H[?12l[?25h[?25l[34m [m[58;192H6-10[44;14H[?12l[?25h[?25l[34mg[m[58;192H7-11[44;15H[?12l[?25h[?25l[34me[m[58;192H8-12[44;16H[?12l[?25h[?25l[34mt[m[58;192H9-13[44;17H[?12l[?25h[?25l[34m [m[58;192H10-14[44;18H[?12l[?25h[?25l[34mp[m[58;193H1-15[44;19H[?12l[?25h[?25l[34mr[m[58;193H2-16[44;20H[?12l[?25h[?25l[34mo[m[58;193H3-17[44;21H[?12l[?25h[?25l[34mp[m[58;193H4-18[44;22H[?12l[?25h[?25l[34me[m[58;193H5-19[44;23H[?12l[?25h[?25l[34mr[m[58;193H6-20[44;24H[?12l[?25h[?25l[34m [m[58;193H7-21[44;25H[?12l[?25h[?25l[34mp[m[58;193H8-22[44;26H[?12l[?25h[?25l[34mr[m[58;193H9-23[44;27H[?12l[?25h[?25l[34mo[m[58;192H20-24[44;28H[?12l[?25h[?25l[34mm[m[58;193H1-25[44;29H[?12l[?25h[?25l[34mp[m[58;193H2-26[44;30H[?12l[?25h[?25l[34mt[m[58;193H3-27[44;31H[?12l[?25h[?25l[34m [m[58;193H4-28[44;32H[?12l[?25h[?25l[34md[m[58;193H5-29[44;33H[?12l[?25h[?25l[34mi[m[58;193H6-30[44;34H[?12l[?25h[?25l[34ms[m[58;193H7-31[44;35H[?12l[?25h[?25l[34mp[m[58;193H8-32[44;36H[?12l[?25h[?25l[34ml[m[58;193H9-33[44;37H[?12l[?25h[?25l[34ma[m[58;192H30-34[44;38H[?12l[?25h[?25l[34my[m[58;193H1-35[44;39H[?12l[?25h[?25l[45;11H[K[46;11Hcout << [31m"$ "[m;[47;11H[K[48;11H[34m// Wait for input[m[48;28H[K[49;11Hstd::getline (std::cin, input);[50;11H[K[51;11H[34m// get string, then convert it to a c* array[m[52;11Hvector<string> words = tokenize(input);[53;13H[34mcout << "wordsCnt: " << words.size();[m[53;50H[K[54;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[55;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[56;11H[34m//char* list[finalWordCount]; [m[56;41H[K[57;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[58;190H1,3-7  [45;11H[?12l[?25h[?25ls[58;192H4-8[45;12H[?12l[?25h[?25lt[58;192H5-9[45;13H[?12l[?25h[?25lr[58;192H6-10[45;14H[?12l[?25h[?25li[58;192H7-11[45;15H[?12l[?25h[?25ln[58;192H8-12[45;16H[?12l[?25h[?25lg[58;192H9-13[45;17H[?12l[?25h[?25l[58;192H10-14[45;18H[?12l[?25h[?25lp[58;193H1-15[45;19H[?12l[?25h[?25lr[58;193H2-16[45;20H[?12l[?25h[?25lo[58;193H3-17[45;21H[?12l[?25h[?25lm[58;193H4-18[45;22H[?12l[?25h[?25lp[58;193H5-19[45;23H[?12l[?25h[?25lt[58;193H6-20[45;24H[?12l[?25h[?25l[58;193H7-21[45;25H[?12l[?25h[?25l=[58;193H8-22[45;26H[?12l[?25h[?25l[58;193H9-23[45;27H[?12l[?25h[?25l[31m"[m[58;192H20-24[45;28H[?12l[?25h[?25l[31m$[m[58;193H1-25[45;29H[?12l[?25h[?25l[31m [m[58;193H2-26[45;30H[?12l[?25h[?25l[31m"[m[58;193H3-27[45;31H[?12l[?25h[?25l[58;193H4-28[45;32H[?12l[?25h[?25l+[58;193H5-29[45;33H[?12l[?25h[?25l[58;193H6-30[45;34H[?12l[?25h[?25l[58;193H5-29[45;33H[?12l[?25h[?25l[45;32H[K[58;193H4-28[45;32H[?12l[?25h[?25l<[58;193H5-29[45;33H[?12l[?25h[?25l<[58;193H6-30[45;34H[?12l[?25h[?25l[58;193H7-31[45;35H[?12l[?25h[?25lg[58;193H8-32[45;36H[?12l[?25h[?25le[58;193H9-33[45;37H[?12l[?25h[?25lt[58;192H30-34[45;38H[?12l[?25h[?25ll[58;193H1-35[45;39H[?12l[?25h[?25lo[58;193H2-36[45;40H[?12l[?25h[?25lg[58;193H3-37[45;41H[?12l[?25h[?25li[58;193H4-38[45;42H[?12l[?25h[?25ln[58;193H5-39[45;43H[?12l[?25h[?25l([58;188H[K[58;188H121,36-40     52%[45;44H[?12l[?25h[?25l)[46m()[m[58;188H[K[58;188H121,37-41     52%[45;45H[?12l[?25h[?25l()[58;193H8-42[45;46H[?12l[?25h[?25l<[58;193H9-43[45;47H[?12l[?25h[?25l<[58;192H40-44[45;48H[?12l[?25h[?25l[58;193H1-45[45;49H[?12l[?25h[?25l[31m"[m[58;193H2-46[45;50H[?12l[?25h[?25l[31m [m[58;193H3-47[45;51H[?12l[?25h[?25l[45;50H[K[58;193H2-46[45;50H[?12l[?25h[?25l[31m@[m[58;193H3-47[45;51H[?12l[?25h[?25l[31m"[m[58;193H4-48[45;52H[?12l[?25h[?25l[58;193H5-49[45;53H[?12l[?25h[?25l<[58;193H6-50[45;54H[?12l[?25h[?25l<[58;193H7-51[45;55H[?12l[?25h[?25l[58;193H8-52[45;56H[?12l[?25h[?25ln[58;193H9-53[45;57H[?12l[?25h[?25la[58;192H50-54[45;58H[?12l[?25h[?25lm[58;193H1-55[45;59H[?12l[?25h[?25le[58;193H2-56[45;60H[?12l[?25h[?25l[58;193H3-57[45;61H[?12l[?25h[?25l<[58;193H4-58[45;62H[?12l[?25h[?25l<[58;193H5-59[45;63H[?12l[?25h[?25l[58;193H6-60[45;64H[?12l[?25h[?25l[31m"[m[58;193H7-61[45;65H[?12l[?25h[?25l[31m [m[58;193H8-62[45;66H[?12l[?25h[?25l[45;65H[K[58;193H7-61[45;65H[?12l[?25h[?25l[31m$[m[58;193H8-62[45;66H[?12l[?25h[?25l[31m [m[58;193H9-63[45;67H[?12l[?25h[?25l[31m"[m[58;192H60-64[45;68H[?12l[?25h[?25l[58;193H1-65[45;69H[?12l[?25h[?25l[58;193H0-64[45;68H[?12l[?25h[?25l;[58;193H1-65[45;69H[?12l[?25h[58;1H[K[45;68H[?25l[58;188H121,60-64     52%[45;68H[?12l[?25h[?25l[58;192H59-63[45;67H[?12l[?25h[?25l[58;193H6-60[45;64H[?12l[?25h[?25l[58;193H3-57[45;61H[?12l[?25h[?25l[58;192H48-52[45;56H[?12l[?25h[?25l[58;193H5-49[45;53H[?12l[?25h[?25l[58;193H1-45[45;49H[?12l[?25h[?25l[58;192H38-42[45;46H[?12l[?25h[?25l[46m()[m[58;193H5-39[45;43H[?12l[?25h[?25l()[58;192H27-31[45;35H[?12l[?25h[?25l[58;193H4-28[45;32H[?12l[?25h[?25l[58;193H2-26[45;30H[?12l[?25h[?25l[58;192H19-23[45;27H[?12l[?25h[?25l$ [31m" << getlogin() << "[m@[31m" << name << "[m$ [31m";[m[45;68H[K[45;27H[?12l[?25h[?25l [31m" << getlogin() << "[m@[31m" << name << "[m$ [31m";[m[45;67H[K[45;27H[?12l[?25h[?25l[31m" << getlogin() << "[m@[31m" << name << "[m$ [31m";[m[45;66H[K[45;27H[?12l[?25h[?25l << getlogin() << [31m"@"[m << name << [31m"$ "[m;[45;65H[K[45;27H[?12l[?25h[?25l<< getlogin() << [31m"@"[m << name << [31m"$ "[m;[45;64H[K[45;27H[?12l[?25h[?25l< getlogin() << [31m"@"[m << name << [31m"$ "[m;[45;63H[K[45;27H[?12l[?25h[?25l getlogin() << [31m"@"[m << name << [31m"$ "[m;[45;62H[K[45;27H[?12l[?25h[?25l[58;190H0[44;27H[?12l[?25h[?25l[58;190H1[45;27H[?12l[?25h[?25l[58;190H2,15-19[46;23H[?12l[?25h[?25l[46;11H[K[47;11H[34m// Wait for input[m[48;11Hstd::getline (std::cin, input);[49;11H[K[50;11H[34m// get string, then convert it to a c* array[m[51;11Hvector<string> words = tokenize(input);[51;50H[K[52;11H[34m//cout << "wordsCnt: " << words.size();[53;13Hfor(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[54;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[54;55H[K[55;11H[34m//char* list[finalWordCount]; [m[55;41H[K[56;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[57;11H[32mint[m count = [31m0[m;[57;25H[K[58;192H0-1  [46;5H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H122,1[9C52%[46;5H[?12l[?25h[?25l[47;11H[K[48;11H[34m// Wait for input[m[48;28H[K[49;11Hstd::getline (std::cin, input);[50;11H[K[51;11H[34m// get string, then convert it to a c* array[m[52;11Hvector<string> words = tokenize(input);[53;13H[34mcout << "wordsCnt: " << words.size();[m[53;50H[K[54;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[55;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[56;11H[34m//char* list[finalWordCount]; [m[56;41H[K[57;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[58;190H3[47;5H[?12l[?25h[?25l[58;192H2-4[47;8H[?12l[?25h[?25l[58;192H3-7[47;11H[?12l[?25h[?25lc[58;192H4-8[47;12H[?12l[?25h[?25lo[58;192H5-9[47;13H[?12l[?25h[?25lu[58;192H6-10[47;14H[?12l[?25h[?25lt[58;192H7-11[47;15H[?12l[?25h[?25l[58;192H8-12[47;16H[?12l[?25h[?25l<[58;192H9-13[47;17H[?12l[?25h[?25l<[58;192H10-14[47;18H[?12l[?25h[?25l[58;193H1-15[47;19H[?12l[?25h[?25lp[58;193H2-16[47;20H[?12l[?25h[?25lr[58;193H3-17[47;21H[?12l[?25h[?25lo[58;193H4-18[47;22H[?12l[?25h[?25lm[58;193H5-19[47;23H[?12l[?25h[?25lp[58;193H6-20[47;24H[?12l[?25h[?25lt[58;193H7-21[47;25H[?12l[?25h[?25l;[58;193H8-22[47;26H[?12l[?25h[?25l[58;193H9-23[47;27H[?12l[?25h[58;1H[K[47;26H[?25l[58;188H123,18-22     52%[47;26H[?12l[?25h[?25l[58;190H4,1-3  [48;7H[?12l[?25h[?25l[58;188H[K[58;1H/[?12l[?25h/[?25l[?12l[?25h[?25l[58;2H[K[58;2H[?12l[?25h:[?25l[?12l[?25h[?25l[58;2H[K[58;2H[?12l[?25h [?25l[186C124,1-3[7C52%[48;7H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h3[?25l[?12l[?25h[?25l[187C123,3-7[7C52%[47;11H[?12l[?25h[?25l[58;192H18-22[47;26H[?12l[?25h[?25l[58;190H4,1-3  [48;7H[?12l[?25h[?25l[58;190H3,18-22[47;26H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H123,18-22     52%[47;26H[?12l[?25h[?25l[58;193H9-23[47;27H[?12l[?25h[?25l/[58;192H20-24[47;28H[?12l[?25h[?25l[34m// [m[58;193H1-25[47;29H[?12l[?25h[?25l[1C[34m [m[58;193H2-26[47;30H[?12l[?25h[?25l[34md [m[58;193H3-27[47;31H[?12l[?25h[?25l[34mi [m[58;193H4-28[47;32H[?12l[?25h[?25l[34ms [m[58;193H5-29[47;33H[?12l[?25h[?25l[34mp [m[58;193H6-30[47;34H[?12l[?25h[?25l[34ml [m[58;193H7-31[47;35H[?12l[?25h[?25l[34ma [m[58;193H8-32[47;36H[?12l[?25h[?25l[34my [m[58;193H9-33[47;37H[?12l[?25h[58;1H[K[47;36H[?25l[58;188H123,28-32     52%[47;36H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hq[?25l[?12l[?25hw[?25l[?12l[?25h[?25l[58;3H[K[58;3H[?12l[?25h[?25l[58;2H[K[58;2H[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 203L, 5160C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cpp[2P;;;;;;;;;;[K./a.oug++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:117:14: error: â€˜hostnameâ€™ was not declared in this scope
  gethostname(hostname, sizeof hostname);
              ^
exec.cpp:121:34: error: invalid operands of types â€˜char*â€™ and â€˜const char [2]â€™ to binary â€˜operator<<â€™
   string prompt =  getlogin() << "@" << name << "$ ";
                                  ^
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 203L, 5160C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h0[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m 72 [m      }
[33m 73 [m      [33melse[m [33mif[m(input.at(cnt) == [31m';'[m) [34m// delimiter #2 - semicolon[m
[33m 74 [m      {
[33m 75 [9Cif[m(word != [31m""[m && word != [31m" "[m) {
[33m 76 [m[12Cv.push_back(word); [34m// push back w/e word we have[m
[33m 77 [m[12CtotalWordCount++;
[33m 78 [m[9C}
[33m 79 [m[9Cv.push_back([31m";"[m); [34m// then add a semicolon [as a new 'word' or element in the vector][m
[33m 80 [m[9Cword = [31m""[m; [34m// reset word[m
[33m 81 [m      }
[33m 82 [m      [33melse
 83 [m      {
[33m 84 [m[9Cprnt([31m"Found a normal character"[m);
[33m 85 
 86 [m[9Cword += input.at(wordCnt);
[33m 87 [m[9C[34m//cout << "kk: "  << word << endl;[m
[33m 88 [m      }
[33m 89 [m[9CwordCnt++;
[33m 90 [m[9Ccnt++;
[33m 91 [m   }
[33m 92 
 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m
[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)
[33m 95 [m   {
[33m 96 [m      v.push_back(word);
[33m 97 [m      [33mif[m(word != [31m";"[m)
[33m 98 [m      {
[33m 99 [m[9Cv.push_back([31m";"[m);
[33m100 [m      }
[33m101 [m      totalWordCount++;
[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 
116 [m   [32mchar[m name[[31m128[m];
[33m117 [m   gethostname(hostname, [33msizeof[m hostname);
[33m118 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m119 [m   {
[33m120 [m      [34m// get proper prompt display[m
[33m121 [m      string prompt =  getlogin() << [31m"@"[m << name << [31m"$ "[m;
[33m122 
123 [m      cout << prompt; [34m// display [m
[33m124 [m      [34m// Wait for input[m
[33m125 [m      std::getline (std::cin, input);
[33m126 
127 [m      [34m// get string, then convert it to a c* array[m
[33m128 [m      vector<string> words = tokenize(input);[58;188H100,3-7[7C48%[29;11H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h1[?25l[?12l[?25h7[?25l[?12l[?25h[?25l[187C117,2-4[7C48%[46;8H[?12l[?25h[?25l[11C[46m([25C)[m[58;192H13-15[46;19H[?12l[?25h[?25l([25C)[58;193H4-16[46;20H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H117,14-16     48%[46;20H, [33msizeof[m hostname);[46;39H[K[46;19H[46m([17C)[m[58;188H[K[58;188H117,14-16     48%[46;20H[?12l[?25h[?25ln, [33msizeof[m hostnam[46me[m);[46;19H([17Ce[58;193H5-17[46;21H[?12l[?25h[?25la, [33msizeof[m hostname);[58;193H6-18[46;22H[?12l[?25h[?25lm, [33msizeof[m hostname);[58;193H7-19[46;23H[?12l[?25h[?25le, [33msizeof[m hostname);[58;193H8-20[46;24H[?12l[?25h[?25lw, [33msizeof[m hostname);[58;193H9-21[46;25H[?12l[?25h[?25lw, [33msizeof[m hostname);[58;192H20-22[46;26H[?12l[?25h[?25l, [33msizeof[m hostname);[46;44H[K[58;192H19-21[46;25H[?12l[?25h[?25l, [33msizeof[m hostname);[46;43H[K[58;193H8-20[46;24H[?12l[?25h[58;1H[K[46;23H[?25l[58;188H117,17-19     48%[46;23H[?12l[?25h[?25l[58;193H8-20[46;24H[?12l[?25h[?25l[58;193H9-21[46;25H[?12l[?25h[?25l[58;192H20-22[46;26H[?12l[?25h[?25l[58;193H7-29[46;33H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H117,27-29     48%[46;33H);[46;35H[K[46;19H[46m([13C)[?12l[?25h[?25ln[m);n[46m)[m[58;193H8-30[46;34H[?12l[?25h[?25l[46ma[m);a[46m)[m[58;193H9-31[46;35H[?12l[?25h[?25l[46mm[m);m[46m)[m[58;192H30-32[46;36H[?12l[?25h[?25l[46me[m);e[46m)[m[58;193H1-33[46;37H[?12l[?25h[58;1H[K[46;36H[?25l[46;19H([17C)[58;188H117,30-32     48%[46;36H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 203L, 5152C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
exec.cpp: In function â€˜int main(int, char**)â€™:
exec.cpp:121:34: error: invalid operands of types â€˜char*â€™ and â€˜const char [2]â€™ to binary â€˜operator<<â€™
   string prompt =  getlogin() << "@" << name << "$ ";
                                  ^
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 203L, 5152C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h2[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)
[33m 95 [m   {
[33m 96 [m      v.push_back(word);
[33m 97 [m      [33mif[m(word != [31m";"[m)
[33m 98 [m      {
[33m 99 [m[9Cv.push_back([31m";"[m);
[33m100 [m      }
[33m101 [m      totalWordCount++;
[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 
116 [m   [32mchar[m name[[31m128[m];
[33m117 [m   gethostname(name, [33msizeof[m name);
[33m118 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m119 [m   {
[33m120 [m      [34m// get proper prompt display[m
[33m121 [m      string prompt =  getlogin() << [31m"@"[m << name << [31m"$ "[m;
[33m122 
123 [m      cout << prompt; [34m// display [m
[33m124 [m      [34m// Wait for input[m
[33m125 [m      std::getline (std::cin, input);
[33m126 
127 [m      [34m// get string, then convert it to a c* array[m
[33m128 [m      vector<string> words = tokenize(input);
[33m129 [m      [34m//cout << "wordsCnt: " << words.size();[m
[33m130 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m
[33m131 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;
[33m132 [m      [34m//char* list[finalWordCount]; [m
[33m133 [m      [32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];
[33m134 [m      [32mint[m count = [31m0[m;
[33m135 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)
[33m136 [m      {
[33m137 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m
[33m138 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m139 [m[9C{
[33m140 [m[14C[34m// execute the command[m
[33m141 [m[14Cpid_t pid;
[33m142 [m[14C[32mint[m status = [31m0[m;
[33m143 [m[14Cpid = fork();
[33m144 
145 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m146 [m[14C{
[33m147 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m148 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m149 [m[14C}
[33m150 [14Celse[m [33mif[m(pid == [31m0[m) [34m// child process[m[58;188H122,0-1[7C63%[29;5H[?12l[?25h[?25l[58;190H1,1-3[28;7H[?12l[?25h[?25l[58;192H3-7[28;11H[?12l[?25h[?25lprompt =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[28;55H[K[28;11H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H121,3-7[7C63%[28;11H =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[28;50H[K[28;11H[?12l[?25h[?25lc =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H4-8[28;12H[?12l[?25h[?25lo =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H5-9[28;13H[?12l[?25h[?25lu =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H6-10[28;14H[?12l[?25h[?25lt =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H7-11[28;15H[?12l[?25h[?25l  =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H8-12[28;16H[?12l[?25h[?25l< =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H9-13[28;17H[?12l[?25h[?25l< =  getlogin() << [31m"@"[m << name << [31m"$ "[m;[58;192H10-14[28;18H[?12l[?25h[?25l=  getlogin() << [31m"@"[m << name << [31m"$ "[m;[28;55H[K[28;18H[?12l[?25h[?25l  getlogin() << [31m"@"[m << name << [31m"$ "[m;[28;54H[K[28;18H[?12l[?25h[58;1H[K[28;17H[?25l[58;188H121,9-13      63%[28;17H[?12l[?25h[?25l[58;190H2,0-1 [29;5H[?12l[?25h[?25l[58;190H3,9-13[30;17H[?12l[?25h[?25l[34m// Wait for input[m[30;28H[K[31;11Hstd::getline (std::cin, input);[32;11H[K[33;11H[34m// get string, then convert it to a c* array[m[34;11Hvector<string> words = tokenize(input);[34;50H[K[35;11H[34m//cout << "wordsCnt: " << words.size();[36;13Hfor(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[37;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[37;55H[K[38;11H[34m//char* list[finalWordCount]; [m[38;41H[K[39;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[40;11H[32mint[m count = [31m0[m;[40;25H[K[41;11H[33mfor[m([32mint[m i[6Ci < totalWordCount; i++)[42;11H{[42;12H[K[43;11H   [34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m[44;14H[33mif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))[45;14H{[45;15H[K[46;14H     [34m// execute the command[m[47;19Hpid_t pid;[47;29H[K[48;19H[32mint[m status = [31m0[m;[49;19Hpid = fork();[49;32H[K[50;19H[K[51;19H[33mif[m(pid <= -[31m1[m) [34m// something went wrong [m[52;19H{[52;20H[K[53;19H   perror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);[54;22Hexit([31m1[m); [34m// quit the program[m[54;50H[K[55;19H}[55;22H[K[56;19H[33melse[m [33mif[m(pid == [31m0[m) [34m// child process[m[57;19H{[57;20H[K[58;192H3-7 [7C4[30;11H[?12l[?25h[?25l[58;190H2,0-1[29;5H[?12l[?25h[?25l[58;190H1,3-7[28;11H[?12l[?25h[?25l[58;190H0[27;11H[?12l[?25h[?25l[58;193H0-34[27;38H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H120,30-34     64%[27;38H[?12l[?25h[?25l[1C[34my[m[58;193H1-35[27;39H[?12l[?25h[?25l[34m y[m[58;193H2-36[27;40H[?12l[?25h[?25l[34may[m[58;193H3-37[27;41H[?12l[?25h[?25l[34mny[m[58;193H4-38[27;42H[?12l[?25h[?25l[34mdy[m[58;193H5-39[27;43H[?12l[?25h[?25l[34m y[m[58;193H6-40[27;44H[?12l[?25h[?25l[34msy[m[58;193H7-41[27;45H[?12l[?25h[?25l[34mhy[m[58;193H8-42[27;46H[?12l[?25h[?25l[34moy[m[58;193H9-43[27;47H[?12l[?25h[?25l[34mwy[m[58;192H40-44[27;48H[?12l[?25h[?25l[27;48H[K[27;48H[?12l[?25h[58;1H[K[27;47H[?25l[58;188H120,39-43     64%[27;47H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 202L, 5123C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[Kg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 202L, 5123C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[58;1H[K[58;1H[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[Kg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[Kg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K[2P;;;;;;;;;;[K[K[K[K[K[K[K[K[K[K./a.out
je;;o
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
: exot
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
exit
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ./a.outvim exec.cpp
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 202L, 5123C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h2[?25l[?12l[?25h0[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m 92 
 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m
[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)
[33m 95 [m   {
[33m 96 [m      v.push_back(word);
[33m 97 [m      [33mif[m(word != [31m";"[m)
[33m 98 [m      {
[33m 99 [m[9Cv.push_back([31m";"[m);
[33m100 [m      }
[33m101 [m      totalWordCount++;
[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 
116 [m   [32mchar[m name[[31m128[m];
[33m117 [m   gethostname(name, [33msizeof[m name);
[33m118 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m119 [m   {
[33m120 [m      [34m// get proper prompt display and show[m
[33m121 [m      cout <<  getlogin() << [31m"@"[m << name << [31m"$ "[m;
[33m122 
123 [m      [34m// Wait for input[m
[33m124 [m      std::getline (std::cin, input);
[33m125 
126 [m      [34m// get string, then convert it to a c* array[m
[33m127 [m      vector<string> words = tokenize(input);
[33m128 [m      [34m//cout << "wordsCnt: " << words.size();[m
[33m129 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m
[33m130 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;
[33m131 [m      [34m//char* list[finalWordCount]; [m
[33m132 [m      [32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];
[33m133 [m      [32mint[m count = [31m0[m;
[33m134 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)
[33m135 [m      {
[33m136 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m
[33m137 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m138 [m[9C{
[33m139 [m[14C[34m// execute the command[m
[33m140 [m[14Cpid_t pid;
[33m141 [m[14C[32mint[m status = [31m0[m;
[33m142 [m[14Cpid = fork();
[33m143 
144 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m145 [m[14C{
[33m146 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m147 [m[17Cexit([31m1[m); [34m// quit the program[m
[33m148 [m[14C}[58;188H120,3-7[7C62%[29;11H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h1[?25l[?12l[?25h6[?25l[?12l[?25h[?25l[187C116,2-4[7C62%[25;8H[?12l[?25h[?25l[58;192H7-9[25;13H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H116,7-9[7C62%[25;13H[?12l[?25h[?25lhname[[31m128[m];[58;192H8-10[25;14H[?12l[?25h[?25loname[[31m128[m];[58;192H9-11[25;15H[?12l[?25h[?25lsname[[31m128[m];[58;192H10-12[25;16H[?12l[?25h[?25ltname[[31m128[m];[58;193H1-13[25;17H[?12l[?25h[58;1H[K[25;16H[?25l[58;188H116,10-12     62%[25;16H[?12l[?25h[?25ltname[46m[[3C][m[58;193H5-17[25;21H[?12l[?25h[?25l[[3C][58;193H6-18[25;22H[?12l[?25h[?25l[46m[[3C][m[58;193H9-21[25;25H[?12l[?25h[?25l[[3C][58;190H7,2-4  [26;8H[?12l[?25h[?25l[11C[46m([17C)[m[58;192H13-15[26;19H[?12l[?25h[?25l([17C)[58;193H4-16[26;20H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H117,14-16     62%[26;20H[?12l[?25h[?25lhname, [33msizeof[m name);[58;193H5-17[26;21H[?12l[?25h[?25loname, [33msizeof[m name);[58;193H6-18[26;22H[?12l[?25h[?25lsname, [33msizeof[m name);[58;193H7-19[26;23H[?12l[?25h[?25ltname, [33msizeof[m name);[58;193H8-20[26;24H[?12l[?25h[58;1H[K[26;23H[?25l[58;188H117,17-19     62%[26;23H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H117,17-19     62%[26;23H[?12l[?25h[?25litname, [33msizeof[m name);[58;193H8-20[26;24H[?12l[?25h[?25litname, [33msizeof[m name);[58;193H9-21[26;25H[?12l[?25h[?25ltname, [33msizeof[m name);[26;44H[K[58;193H8-20[26;24H[?12l[?25h[?25ltname, [33msizeof[m name);[26;43H[K[58;193H7-19[26;23H[?12l[?25h[58;1H[K[26;22H[?25l[58;188H117,16-18     62%[26;22H[?12l[?25h[?25l[58;192H22-24[26;28H[?12l[?25h[?25l[58;193H4-26[26;30H[?12l[?25h[?25l[58;192H31-33[26;37H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H117,31-33     62%[26;37H[?12l[?25h[?25lhname);[58;193H2-34[26;38H[?12l[?25h[?25loname);[58;193H3-35[26;39H[?12l[?25h[?25lsname);[58;193H4-36[26;40H[?12l[?25h[?25ltname);[58;193H5-37[26;41H[?12l[?25h[58;1H[K[26;40H[?25l[58;188H117,34-36     62%[26;40H[?12l[?25h[?25l[26;19H[46m([25C)[m[58;193H9-41[26;45H[?12l[?25h[?25l[26;19H([25C)[58;190H8,2-4  [27;8H[?12l[?25h[?25l[5C[46m([mcont[46m)[m[58;192H7-9[27;13H[?12l[?25h[?25l(cont)[58;192H8-10[27;14H[?12l[?25h[?25l[46m([mcont[46m)[m[58;192H12-14[27;18H[?12l[?25h[?25l(cont)[58;193H4-16[27;20H[?12l[?25h[?25l[58;193H7-19[27;23H[?12l[?25h[?25l[58;192H27-2[27;33H[?12l[?25h[?25l[58;192H33-35[27;39H[?12l[?25h[?25l[58;193H5-37[27;41H[?12l[?25h[?25l[6C[34m[46m([21C)[m[58;192H41-43[27;47H[?12l[?25h[?25l[34m([21C)[m[58;193H2-44[27;48H[?12l[?25h[?25l[58;193H7-49[27;53H[?12l[?25h[?25l[58;192H52-54[27;58H[?12l[?25h[?25l[58;193H6-58[27;62H[?12l[?25h[?25l[58;193H9-61[27;65H[?12l[?25h[?25l[27;47H[34m[46m([21C)[m[58;192H63-65[27;69H[?12l[?25h[?25l[27;47H[34m([21C)[m[58;190H9,2-4  [28;8H[?12l[?25h[?25l[58;189H20,3-7[29;11H[?12l[?25h[?25l[58;192H6-10[29;14H[?12l[?25h[?25l[58;192H10-14[29;18H[?12l[?25h[?25l[58;193H7-21[29;25H[?12l[?25h[?25l[58;192H24-28[29;32H[?12l[?25h[?25l[58;192H32-36[29;40H[?12l[?25h[?25l[58;193H6-40[29;44H[?12l[?25h[?25l[58;190H1,3-7  [30;11H[?12l[?25h[?25l[58;192H8-12[30;16H[?12l[?25h[?25l[58;192H12-16[30;20H[?12l[?25h[?25l[8C[46m()[m[58;192H20-24[30;28H[?12l[?25h[?25l()[58;193H3-27[30;31H[?12l[?25h[?25l[58;193H6-30[30;34H[?12l[?25h[?25l[58;192H30-34[30;38H[?12l[?25h[?25l[58;193H3-37[30;41H[?12l[?25h[?25l[58;193H8-42[30;46H[?12l[?25h[?25l[58;193H3-37[30;41H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H121,33-37     62%[30;41H[?12l[?25h[?25lhname << [31m"$ "[m;[58;193H4-38[30;42H[?12l[?25h[?25loname << [31m"$ "[m;[58;193H5-39[30;43H[?12l[?25h[?25lsname << [31m"$ "[m;[58;193H6-40[30;44H[?12l[?25h[?25ltname << [31m"$ "[m;[58;193H7-41[30;45H[?12l[?25h[58;1H[K[30;44H[?25l[58;188H121,36-40     62%[30;44H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 202L, 5139C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cpp[5P./a.outvim exec.cppg++ exec.cpp -Wall -Werror -ansi -pedantic
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K[5P./a.outvim exec.cpp[5P./a.out
ello
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
echo hello
hello
echo swag
swag
^[[A^[[A^C
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ./a.outg++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K[5P./a.outvim exec.cpp
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;58r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[58;1H"exec.cpp" 202L, 5139C[>c[1;1H[33m  1 [m[35m#include [m[31m<sys/types.h>[m
[33m  2 [m[35m#include [m[31m<sys/wait.h>[m
[33m  3 [m[35m#include [m[31m<vector>[m
[33m  4 [m[35m#include [m[31m<stdio.h>[m
[33m  5 [m[35m#include [m[31m<unistd.h>[m
[33m  6 [m[35m#include [m[31m<errno.h>[m
[33m  7 [m[35m#include [m[31m<stdlib.h>[m
[33m  8 [m[35m#include [m[31m<string.h>[m
[33m  9 [m[35m#include [m[31m<iostream>[m
[33m 10 
 11 using[m [32mnamespace[m std;
[33m 12 
 13 [m[32mbool[m printErrors = [31mfalse[m;
[33m 14 [m[32mint[m totalWordCount = [31m0[m;
[33m 15 [m[32mvoid[m prnt(string s)
[33m 16 [m{
[33m 17 [m   [33mif[m(printErrors)
[33m 18 [m      cout << s << endl;
[33m 19 [m}
[33m 20 
 21 [m[34m/* [m
[33m 22 [m[34m   vector<string> tokenize(string)[m
[33m 23 [m[34m   ===================================================================================[m
[33m 24 [m[34m   responsible for splitting up the input into words[m
[33m 25 [m[34m   creates a vector of strings (size of char** is undetermined until[m
[33m 26 [m[34m      parsing is done, so I use vectors because of their dynami size[m
[33m 27 [m[34m   [m
[33m 28 [m[34m   loops through all the letters of the input, and once a delimiter(space, etc)[m
[33m 29 [m[34m      is found, it will merge the letters into a word, add it to the vector,[m
[33m 30 [m[34m      and reset the word (word = "")[m
[33m 31 
 32 [m[34m      [m
[33m 33 [m[34m*/[m
[33m 34 
 35 [mvector<string>  tokenize(string input)
[33m 36 [m{
[33m 37 [m   vector<string>  v; [34m// contains all the words delimited by spaces and ;[m
[33m 38 
 39 [m   [32mint[m cnt = [31m0[m, wordCnt = [31m0[m; [34m// cnt=index in input string, wordCnt = current word length[m
[33m 40 [m   string word; [34m// add letters from input to this string, then add it to vector when delim. found  [m
[33m 41 
 42 [m   [33mfor[m(string::iterator it=input.begin(); it != input.end(); it++)[34m// not null[m
[33m 43 [m   {
[33m 44 [m      [33mif[m(input.at(cnt) == [31m'#'[m)
[33m 45 [m      {
[33m 46 [9Cif[m(word != [31m" "[m && !word.empty())
[33m 47 [m[9C{
[33m 48 [m[12Cv.push_back(word);
[33m 49 
 50 [m[12C[34m//cout << "daWord: " << word << endl; [m
[33m 51 
 52 [m[9C}
[33m 53 [m[9Cv.push_back([31m";"[m);
[33m 54 [m[9Cword = [31m""[m;
[33m 55 [9Cbreak[m;
[33m 56 [m      }
[33m 57 [m      [33melse[m [33mif[m(input.at(cnt) == [31m' '[m) [34m// delimiter #1 - space[m[58;188H1,1[11CTop[1;5H[?12l[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[58;1H[K[58;1H:[?12l[?25h1[?25l[?12l[?25h1[?25l[?12l[?25h9[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[33m 91 [m   }
[33m 92 
 93 [m   [34m// add the last word (since it wasnt proccessed by the for loop above)[m
[33m 94 [m   [33mif[m(word != [31m""[m && word != [31m" "[m)
[33m 95 [m   {
[33m 96 [m      v.push_back(word);
[33m 97 [m      [33mif[m(word != [31m";"[m)
[33m 98 [m      {
[33m 99 [m[9Cv.push_back([31m";"[m);
[33m100 [m      }
[33m101 [m      totalWordCount++;
[33m102 [m   }
[33m103 [m   totalWordCount++;
[33m104 
105 [m   [33mif[m(v.at(v.size()-[31m1[m) != [31m";"[m) { v.push_back([31m";"[m); }
[33m106 [m   totalWordCount = v.size();
[33m107 [m   [33mreturn[m v;
[33m108 [m}
[33m109 
110 [m[32mint[m main([32mint[m argc, [32mchar[m** argv)
[33m111 [m{
[33m112 [m   [34m//cout << "Initializing command prompt.." << endl;[m
[33m113 [m   string input;
[33m114 [m   [32mbool[m cont = [31mtrue[m;
[33m115 
116 [m   [32mchar[m hostname[[31m128[m];
[33m117 [m   gethostname(hostname, [33msizeof[m hostname);
[33m118 [m   [33mwhile[m(cont) [34m// perpetual until a break (when last cmd is used)[m
[33m119 [m   {
[33m120 [m      [34m// get proper prompt display and show[m
[33m121 [m      cout <<  getlogin() << [31m"@"[m << hostname << [31m"$ "[m;
[33m122 
123 [m      [34m// Wait for input[m
[33m124 [m      std::getline (std::cin, input);
[33m125 
126 [m      [34m// get string, then convert it to a c* array[m
[33m127 [m      vector<string> words = tokenize(input);
[33m128 [m      [34m//cout << "wordsCnt: " << words.size();[m
[33m129 [m      [34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m
[33m130 [m      [32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;
[33m131 [m      [34m//char* list[finalWordCount]; [m
[33m132 [m      [32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];
[33m133 [m      [32mint[m count = [31m0[m;
[33m134 [m      [33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)
[33m135 [m      {
[33m136 [m[9C[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m
[33m137 [9Cif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))
[33m138 [m[9C{
[33m139 [m[14C[34m// execute the command[m
[33m140 [m[14Cpid_t pid;
[33m141 [m[14C[32mint[m status = [31m0[m;
[33m142 [m[14Cpid = fork();
[33m143 
144 [14Cif[m(pid <= -[31m1[m) [34m// something went wrong [m
[33m145 [m[14C{
[33m146 [m[17Cperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);
[33m147 [m[17Cexit([31m1[m); [34m// quit the program[m[58;188H119,2-4[7C62%[29;8H[?12l[?25h[?25l[58;190H8[28;8H[?12l[?25h[?25l[58;190H7[27;8H[?12l[?25h[?25l[58;190H8[28;8H[?12l[?25h[?25l[58;190H9[29;8H[?12l[?25h[?25l[58;189H20,2-6[30;10H[?12l[?25h[?25l[58;190H1[31;10H[?12l[?25h[?25l[58;190H2,0-1[32;5H[?12l[?25h[?25l[58;1H[1m-- INSERT --[m[58;188H[K[58;188H122,1[9C62%[32;5H[?12l[?25h[?25l[58;192H2-4[32;8H[?12l[?25h[?25l[58;192H3-7[32;11H[?12l[?25h[?25lc[58;192H4-8[32;12H[?12l[?25h[?25lo[58;192H5-9[32;13H[?12l[?25h[?25lu[58;192H6-10[32;14H[?12l[?25h[?25lt[58;192H7-11[32;15H[?12l[?25h[?25l.[58;192H8-12[32;16H[?12l[?25h[?25lf[58;192H9-13[32;17H[?12l[?25h[?25ll[58;192H10-14[32;18H[?12l[?25h[?25lu[58;193H1-15[32;19H[?12l[?25h[?25ls[58;193H2-16[32;20H[?12l[?25h[?25lh[58;193H3-17[32;21H[?12l[?25h[?25l([58;188H[K[58;188H122,14-18     62%[32;22H[?12l[?25h[?25l)[46m()[m[58;188H[K[58;188H122,15-19     62%[32;23H[?12l[?25h[?25l;()[58;193H6-20[32;24H[?12l[?25h[?25l[33;11H[K[34;11H[34m// Wait for input[m[34;28H[K[35;11Hstd::getline (std::cin, input);[36;11H[K[37;11H[34m// get string, then convert it to a c* array[m[38;11Hvector<string> words = tokenize(input);[39;13H[34mcout << "wordsCnt: " << words.size();[m[39;50H[K[40;11H[34m//for(int i =0; i<words.size(); i++) { cout << "w" << i << ": " << words[i] << endl; }    [m[41;11H[32mconst[m [32mint[m finalWordCount = totalWordCount+[31m1[m;[42;11H[34m//char* list[finalWordCount]; [m[42;41H[K[43;11H[32mchar[m **list = [33mnew[m [32mchar[m*[finalWordCount];[44;11H[32mint[m count[44;26H[K[45;11H[33mfor[m([32mint[m i = [31m0[m; i < totalWordCount; i++)[46;11H{[46;14H[K[47;14H[34m//cout << "TWC " << totalWordCount << "..i=" << i << endl; [m[47;73H[K[48;14H[33mif[m((words[i] == [31m";"[m) || words[i] == [31m"||"[m || (words[i] == [31m"&&"[m))[49;14H{[49;19H[K[50;19H[34m// execute the command[m[51;19Hpid_t pid;[51;30H[K[52;19H[32mint[m status = [31m0[m;[53;19Hpid = fork();[54;19H[K[55;19H[33mif[m(pid <= -[31m1[m) [34m// something went wrong [m[56;19H{[56;22H[K[57;22Hperror([31m"ERROR [FORK]: CHILD FAILED[m[35m\n[m[31m"[m);[58;190H3,3-7       61[33;11H[?12l[?25h[58;1H[K[33;5H[?25l[58;188H123,0-1[7C61%[33;5H[?12l[?25h[?25l[58;188H[K[58;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"exec.cpp" 203L, 5155C written
[?1l>[?12l[?25h[?1049l]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ vim exec.cpp[5P./a.outg++ exec.cpp -Wall -Werror -ansi -pedantic
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ g++ exec.cpp -Wall -Werror -ansi -pedanticvim exec.cpp[K[5P./a.out
hello
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
echo hello
hello
^[^C
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ddj -Y jmoon018:[K@hammer.cs.ucr.edu
No command 'ddj' found, did you mean:
 Command 'udj' from package 'udj-desktop-client' (universe)
 Command 'dds' from package 'dds' (universe)
 Command 'ddd' from package 'ddd' (universe)
 Command 'ddv' from package 'ncbi-tools-x11' (universe)
 Command 'dd' from package 'coreutils' (main)
ddj: command not found
]0;jamal@jamal-P15SM: ~/Documents/CS100/rshelljamal@jamal-P15SM:~/Documents/CS100/rshell$ ssh -Y jmoon018@uc[K[Khammer.cs.ucr.edu
jmoon018@hammer.cs.ucr.edu's password: 
Permission denied, please try again.
jmoon018@hammer.cs.ucr.edu's password: 
Last login: Mon Oct 20 11:28:36 2014 from ucrwpa2-4-182-99.bulk.ucr.edu
~
jmoon018@hammer $ cs100
[0;91m
===============================================================================
|                                                                             |
| You have enabled settings specific for cs100.                               |
|                                                                             |
===============================================================================
[0m
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~[0;95m [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~[0;95m [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~[0;95m [0;36m$[0m lscd ..[K[K[K[K[Kls
Desktop  Documents  Downloads  hello.cpp  lab1.cpp  Music  Pictures  Public  Templates	Videos
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~[0;95m [0;36m$[0m git [K[K[K[Kcd Documents
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents[0;95m [0;36m$[0m ls
cs100gitHubStuff  cs61	firstrepo
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents[0;95m [0;36m$[0m cd cs100githubstuff
bash: cd: cs100githubstuff: No such file or directory
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents[0;95m [0;36m$[0m cs100gitHubStuff
bash: cs100gitHubStuff: command not found
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents[0;95m [0;36m$[0m cd cs100gitHubStuff
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff[0;95m [0;36m$[0m ls
lab2  ucr-cs100
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff[0;95m [0;36m$[0m cd ucr-cs100
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100[0;95m (cs100-2014fall) [0;36m$[0m l[Kgit[K[K[Kgit[K[K[Kls
assignments  GRADES.md	lecture  LICENSE  people  README.md  scripts  tutorials
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100[0;95m (cs100-2014fall) [0;36m$[0m git clone http://github.com/jmoon018/rshell.git
Cloning into 'rshell'...
remote: Counting objects: 31, done.[K
remote: Compressing objects:   4% (1/21)   [Kremote: Compressing objects:   9% (2/21)   [Kremote: Compressing objects:  14% (3/21)   [Kremote: Compressing objects:  19% (4/21)   [Kremote: Compressing objects:  23% (5/21)   [Kremote: Compressing objects:  28% (6/21)   [Kremote: Compressing objects:  33% (7/21)   [Kremote: Compressing objects:  38% (8/21)   [Kremote: Compressing objects:  42% (9/21)   [Kremote: Compressing objects:  47% (10/21)   [Kremote: Compressing objects:  52% (11/21)   [Kremote: Compressing objects:  57% (12/21)   [Kremote: Compressing objects:  61% (13/21)   [Kremote: Compressing objects:  66% (14/21)   [Kremote: Compressing objects:  71% (15/21)   [Kremote: Compressing objects:  76% (16/21)   [Kremote: Compressing objects:  80% (17/21)   [Kremote: Compressing objects:  85% (18/21)   [Kremote: Compressing objects:  90% (19/21)   [Kremote: Compressing objects:  95% (20/21)   [Kremote: Compressing objects: 100% (21/21)   [Kremote: Compressing objects: 100% (21/21), done.[K
remote: Total 31 (delta 9), reused 13 (delta 3)[K
Unpacking objects:   3% (1/31)   Unpacking objects:   6% (2/31)   Unpacking objects:   9% (3/31)   Unpacking objects:  12% (4/31)   Unpacking objects:  16% (5/31)   Unpacking objects:  19% (6/31)   Unpacking objects:  22% (7/31)   Unpacking objects:  25% (8/31)   Unpacking objects:  29% (9/31)   Unpacking objects:  32% (10/31)   Unpacking objects:  35% (11/31)   Unpacking objects:  38% (12/31)   Unpacking objects:  41% (13/31)   Unpacking objects:  45% (14/31)   Unpacking objects:  48% (15/31)   Unpacking objects:  51% (16/31)   Unpacking objects:  54% (17/31)   Unpacking objects:  58% (18/31)   Unpacking objects:  61% (19/31)   Unpacking objects:  64% (20/31)   Unpacking objects:  67% (21/31)   Unpacking objects:  70% (22/31)   Unpacking objects:  74% (23/31)   Unpacking objects:  77% (24/31)   Unpacking objects:  80% (25/31)   Unpacking objects:  83% (26/31)   Unpacking objects:  87% (27/31)   Unpacking objects:  90% (28/31)   Unpacking objects:  93% (29/31)   Unpacking objects:  96% (30/31)   Unpacking objects: 100% (31/31)   Unpacking objects: 100% (31/31), done.
Checking connectivity... done
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100[0;95m (cs100-2014fall) [0;36m$[0m cd rshell
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m ls
README.md
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m git branch
* [32mmaster[m
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m git branch exec
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m git branch exec[K
  exec[m
* [32mmaster[m
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m git branch exec
fatal: A branch named 'exec' already exists.
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m branch exec
bash: branch: command not found
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m e[Kcheckout exec
bash: checkout: command not found
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (master) [0;36m$[0m git checkout exec
Switched to branch 'exec'
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (exec) [0;36m$[0m git checkout exec[4P[C[C[C[C[C[C[C[C[C[C[C[C[C[2Pbranch[C[C[C[C[C[4hgit [4l[C[C[C[C[C[C[C[C[C[C[C[K exec[Kls[Kcd rshellgit clone http://github.com/jmoon018/rshell.git
Cloning into 'rshell'...
remote: Counting objects: 31, done.[K
remote: Compressing objects:   4% (1/21)   [Kremote: Compressing objects:   9% (2/21)   [Kremote: Compressing objects:  14% (3/21)   [Kremote: Compressing objects:  19% (4/21)   [Kremote: Compressing objects:  23% (5/21)   [Kremote: Compressing objects:  28% (6/21)   [Kremote: Compressing objects:  33% (7/21)   [Kremote: Compressing objects:  38% (8/21)   [Kremote: Compressing objects:  42% (9/21)   [Kremote: Compressing objects:  47% (10/21)   [Kremote: Compressing objects:  52% (11/21)   [Kremote: Compressing objects:  57% (12/21)   [Kremote: Compressing objects:  61% (13/21)   [Kremote: Compressing objects:  66% (14/21)   [Kremote: Compressing objects:  71% (15/21)   [Kremote: Compressing objects:  76% (16/21)   [Kremote: Compressing objects:  80% (17/21)   [Kremote: Compressing objects:  85% (18/21)   [Kremote: Compressing objects:  90% (19/21)   [Kremote: Compressing objects:  95% (20/21)   [Kremote: Compressing objects: 100% (21/21)   [Kremote: Compressing objects: 100% (21/21), done.[K
remote: Total 31 (delta 9), reused 13 (delta 3)[K
Unpacking objects:   3% (1/31)   Unpacking objects:   6% (2/31)   Unpacking objects:   9% (3/31)   Unpacking objects:  12% (4/31)   Unpacking objects:  16% (5/31)   Unpacking objects:  19% (6/31)   Unpacking objects:  22% (7/31)   Unpacking objects:  25% (8/31)   Unpacking objects:  29% (9/31)   Unpacking objects:  32% (10/31)   Unpacking objects:  35% (11/31)   Unpacking objects:  38% (12/31)   Unpacking objects:  41% (13/31)   Unpacking objects:  45% (14/31)   Unpacking objects:  48% (15/31)   Unpacking objects:  51% (16/31)   Unpacking objects:  54% (17/31)   Unpacking objects:  58% (18/31)   Unpacking objects:  61% (19/31)   Unpacking objects:  64% (20/31)   Unpacking objects:  67% (21/31)   Unpacking objects:  70% (22/31)   Unpacking objects:  74% (23/31)   Unpacking objects:  77% (24/31)   Unpacking objects:  80% (25/31)   Unpacking objects:  83% (26/31)   Unpacking objects:  87% (27/31)   Unpacking objects:  90% (28/31)   Unpacking objects:  93% (29/31)   Unpacking objects:  96% (30/31)   Unpacking objects: 100% (31/31)   Unpacking objects: 100% (31/31), done.
Checking connectivity... done
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (exec) [0;36m$[0m ls
README.md  rshell
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell[0;95m (exec) [0;36m$[0m cd rshell
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m ls
README.md
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m [K[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m lscd rshellls[Kgit clone http://github.com/jmoon018/rshell.githeckout exec[Klone http://github.com/jmoon018/rshell.git
Cloning into 'rshell'...
remote: Counting objects: 42, done.[K
remote: Compressing objects:   3% (1/27)   [Kremote: Compressing objects:   7% (2/27)   [Kremote: Compressing objects:  11% (3/27)   [Kremote: Compressing objects:  14% (4/27)   [Kremote: Compressing objects:  18% (5/27)   [Kremote: Compressing objects:  22% (6/27)   [Kremote: Compressing objects:  25% (7/27)   [Kremote: Compressing objects:  29% (8/27)   [Kremote: Compressing objects:  33% (9/27)   [Kremote: Compressing objects:  37% (10/27)   [Kremote: Compressing objects:  40% (11/27)   [Kremote: Compressing objects:  44% (12/27)   [Kremote: Compressing objects:  48% (13/27)   [Kremote: Compressing objects:  51% (14/27)   [Kremote: Compressing objects:  55% (15/27)   [Kremote: Compressing objects:  59% (16/27)   [Kremote: Compressing objects:  62% (17/27)   [Kremote: Compressing objects:  66% (18/27)   [Kremote: Compressing objects:  70% (19/27)   [Kremote: Compressing objects:  74% (20/27)   [Kremote: Compressing objects:  77% (21/27)   [Kremote: Compressing objects:  81% (22/27)   [Kremote: Compressing objects:  85% (23/27)   [Kremote: Compressing objects:  88% (24/27)   [Kremote: Compressing objects:  92% (25/27)   [Kremote: Compressing objects:  96% (26/27)   [Kremote: Compressing objects: 100% (27/27)   [Kremote: Compressing objects: 100% (27/27), done.[K
remote: Total 42 (delta 16), reused 22 (delta 8)[K
Unpacking objects:   2% (1/42)   Unpacking objects:   4% (2/42)   Unpacking objects:   7% (3/42)   Unpacking objects:   9% (4/42)   Unpacking objects:  11% (5/42)   Unpacking objects:  14% (6/42)   Unpacking objects:  16% (7/42)   Unpacking objects:  19% (8/42)   Unpacking objects:  21% (9/42)   Unpacking objects:  23% (10/42)   Unpacking objects:  26% (11/42)   Unpacking objects:  28% (12/42)   Unpacking objects:  30% (13/42)   Unpacking objects:  33% (14/42)   Unpacking objects:  35% (15/42)   Unpacking objects:  38% (16/42)   Unpacking objects:  40% (17/42)   Unpacking objects:  42% (18/42)   Unpacking objects:  45% (19/42)   Unpacking objects:  47% (20/42)   Unpacking objects:  50% (21/42)   Unpacking objects:  52% (22/42)   Unpacking objects:  54% (23/42)   Unpacking objects:  57% (24/42)   Unpacking objects:  59% (25/42)   Unpacking objects:  61% (26/42)   Unpacking objects:  64% (27/42)   Unpacking objects:  66% (28/42)   Unpacking objects:  69% (29/42)   Unpacking objects:  71% (30/42)   Unpacking objects:  73% (31/42)   Unpacking objects:  76% (32/42)   Unpacking objects:  78% (33/42)   Unpacking objects:  80% (34/42)   Unpacking objects:  83% (35/42)   Unpacking objects:  85% (36/42)   Unpacking objects:  88% (37/42)   Unpacking objects:  90% (38/42)   Unpacking objects:  92% (39/42)   Unpacking objects:  95% (40/42)   Unpacking objects:  97% (41/42)   Unpacking objects: 100% (42/42)   Unpacking objects: 100% (42/42), done.
Checking connectivity... done
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m s[Kls
README.md  rshell
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell[0;95m (master) [0;36m$[0m cd rshell
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m ls
exec.cpp  Makefile  README.md  testfile.cpp
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m run[K[K[Ke[Kg++ exec.cpp
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m r[K./a.out
jmoon018@hammer.cs.ucr.edu$ hello swa         echo hi
hi
jmoon018@hammer.cs.ucr.edu$ e false || echo no 
no
jmoon018@hammer.cs.ucr.edu$ true || echo no
jmoon018@hammer.cs.ucr.edu$ exit
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m script exec.script
Script started, file is exec.script
~
jmoon018@hammer $ .[Kecho [K[K[K[K[K.[Kexit
exit
Script done, file is exec.script
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m script exec.script
Script started, file is exec.script
~
jmoon018@hammer $ .[K;;;;;;;;;
bash: syntax error near unexpected token `;;'
~
jmoon018@hammer $ .[K;;;;;;;;;[5Pexit
exit
Script done, file is exec.script
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m script exec.script[11P./a.outscript exec.script
Script started, file is exec.script
~
jmoon018@hammer $ ./a.out
bash: ./a.out: No such file or directory
~
jmoon018@hammer $ g++[K[K[Kg++ exec.cpp
g++: exec.cpp: No such file or directory
g++: no input files
~
jmoon018@hammer $ :[K-[Kexit
exit
Script done, file is exec.script
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m scr[K[K[Ktou[K[K[Kls
a.out  exec.cpp  exec.script  Makefile	README.md  testfile.cpp
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m cat exec.script
Script started on Tue 21 Oct 2014 11:26:24 PM PDT
~
jmoon018@hammer $ ./a.out
bash: ./a.out: No such file or directory
~
jmoon018@hammer $ g++[K[K[Kg++ exec.cpp
g++: exec.cpp: No such file or directory
g++: no input files
~
jmoon018@hammer $ :[K-[Kexit
exit

Script done on Tue 21 Oct 2014 11:26:54 PM PDT
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m cat exec.script[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscript
Script started, file is typescript
~
jmoon018@hammer $ .[Kcd[K[Kcs
bash: cs: command not found
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents/[K
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd[K[Kls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ git ucr-cs100
git: 'ucr-cs100' is not a git command. See 'git --help'.
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls[K[Kcd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell/rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ cd
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ ls
[0m[01;34massignments[0m/  GRADES.md  [01;34mlecture[0m/  LICENSE  [01;34mpeople[0m/  README.md  [01;34mrshell[0m/  [01;34mscripts[0m/  [01;34mtutorials[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ c[Kls
[0m[01;32ma.out[0m*  exec.cpp  exec.script  Makefile  README.md  testfile.cpp  typescript
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ run[K[K[K./a.out
jmoon018@hammer.cs.ucr.edu$ #simple stuff
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world
hello world
jmoon018@hammer.cs.ucr.edu$ echo hello;
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world;
hello world
jmoon018@hammer.cs.ucr.edu$ echo hell    hello hello hello echo  ; 
hello hello hello echo
jmoon018@hammer.cs.ucr.edu$ echo hello; echo nah; echo more words; echo more; ech  o more more more more more; echo i love words;
hello
nah
more words
more
more more more more more
i love words
jmoon018@hammer.cs.ucr.edu$ echo lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
jmoon018@hammer.cs.ucr.edu$ #lets use different commands
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ ls - ls    -a
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ pwd
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ touch newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #look, the newfile.txt exists!
jmoon018@hammer.cs.ucr.edu$ e # lets use ; connector
jmoon018@hammer.cs.ucr.edu$ echo hello; echo world; echo .; 
hello
world
.
jmoon018@hammer.cs.ucr.edu$ echo hello world; echo my name is jamal. ; echo nice to meet you all.
hello world
my name is jamal
nice to meet you all.
jmoon018@hammer.cs.ucr.edu$ echo hello world!; lsl   ; ls -a; pwd
hello world!
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  newfile.txt  README.md  testfile.cpp  typescript
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ #easy.. now let's checkout      out the comments
jmoon018@hammer.cs.ucr.edu$ echo hi
hi
jmoon018@hammer.cs.ucr.edu$ echo #hi

jmoon018@hammer.cs.ucr.edu$ echo #  #hi

jmoon018@hammer.cs.ucr.edu$ echo hi # hi
hi
jmoon018@hammer.cs.ucr.edu$ echo ol    words xxx x x # comments this wont appear anywhere oh nooooo
words xxx x x
jmoon018@hammer.cs.ucr.edu$ #no   lets look at cmd connectors: &&
jmoon018@hammer.cs.ucr.edu$ l false || echo hi
hi
jmoon018@hammer.cs.ucr.edu$ true ||         fa  true && echo hi
hi
jmoon018@hammer.cs.ucr.edu$ false && echo hi
jmoon018@hammer.cs.ucr.edu$ echo hi * && echo TRUE!
hi
TRUE!
jmoon018@hammer.cs.ucr.edu$ e mkdir teemo && echo this will print
this will print
jmoon018@hammer.cs.ucr.edu$ mki dir teemo && thi   echo this wont print
mkdir: cannot create directory `teemo': File exists
jmoon018@hammer.cs.ucr.edu$ f true && echo more stuff; fals    echo lllll     hi world && e ls;   
more stuff
hi world
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ # || operator
jmoon018@hammer.cs.ucr.edu$ false || echo n i like my mouse
i like my mouse
jmoon018@hammer.cs.ucr.edu$ true || echo this wont print!
jmoon018@hammer.cs.ucr.edu$ echo this will print! || echo this wont print!
this will print!
jmoon018@hammer.cs.ucr.edu$ mkdir teemo || echo another print!
mkdir: cannot create directory `teemo': File exists
another print!
jmoon018@hammer.cs.ucr.edu$ echo print || echo print || echo print
print
jmoon018@hammer.cs.ucr.edu$ echo stuff || echo nah; echo words            mkd   false || echo i like music
stuff
jmoon018@hammer.cs.ucr.edu$ e echo words && echo hi || echo this shouldnt print
words
hi
jmoon018@hammer.cs.ucr.edu$ echo w this && echo will && echo all ||  && echo print
this
will
all
print
jmoon018@hammer.cs.ucr.edu$ echo stuff ||  &            echo wor        ls || echo words && echo hi
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #lets do some weird stuff
jmoon018@hammer.cs.ucr.edu$ ./a.out
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ exit
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo exit         # lets try to throw t it off f
jmoon018@hammer.cs.ucr.edu$ echo exit
exit
jmoon018@hammer.cs.ucr.edu$ ex cho exit exit exit **  &&&  ls
exit exit exit
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ rm newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  teemo  testfile.cpp	typescript
jmoon018@hammer.cs.ucr.edu$ # newfile.txt is gone!
jmoon018@hammer.cs.ucr.edu$ #o  ok now i leave                ;;;;;
jmoon018@hammer.cs.ucr.edu$ ;;;;;|||
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
jmoon018@hammer.cs.ucr.edu$ &&&&
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
jmoon018@hammer.cs.ucr.edu$ # prints errors appropriately
jmoon018@hammer.cs.ucr.edu$ # ith   i think thats all.. exiting
jmoon018@hammer.cs.ucr.edu$ exit
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ exit
exit
Script done, file is typescript
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m cat typescript
Script started on Tue 21 Oct 2014 11:27:26 PM PDT
~
jmoon018@hammer $ .[Kcd[K[Kcs
bash: cs: command not found
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents/[K
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd[K[Kls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ git ucr-cs100
git: 'ucr-cs100' is not a git command. See 'git --help'.
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls[K[Kcd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell/rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ cd
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ ls
[0m[01;34massignments[0m/  GRADES.md  [01;34mlecture[0m/  LICENSE  [01;34mpeople[0m/  README.md  [01;34mrshell[0m/  [01;34mscripts[0m/  [01;34mtutorials[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ c[Kls
[0m[01;32ma.out[0m*  exec.cpp  exec.script  Makefile  README.md  testfile.cpp  typescript
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ run[K[K[K./a.out
jmoon018@hammer.cs.ucr.edu$ #simple stuff
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world
hello world
jmoon018@hammer.cs.ucr.edu$ echo hello;
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world;
hello world
jmoon018@hammer.cs.ucr.edu$ echo hell    hello hello hello echo  ; 
hello hello hello echo
jmoon018@hammer.cs.ucr.edu$ echo hello; echo nah; echo more words; echo more; ech  o more more more more more; echo i love words;
hello
nah
more words
more
more more more more more
i love words
jmoon018@hammer.cs.ucr.edu$ echo lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
jmoon018@hammer.cs.ucr.edu$ #lets use different commands
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ ls - ls    -a
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ pwd
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ touch newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #look, the newfile.txt exists!
jmoon018@hammer.cs.ucr.edu$ e # lets use ; connector
jmoon018@hammer.cs.ucr.edu$ echo hello; echo world; echo .; 
hello
world
.
jmoon018@hammer.cs.ucr.edu$ echo hello world; echo my name is jamal. ; echo nice to meet you all.
hello world
my name is jamal
nice to meet you all.
jmoon018@hammer.cs.ucr.edu$ echo hello world!; lsl   ; ls -a; pwd
hello world!
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  newfile.txt  README.md  testfile.cpp  typescript
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ #easy.. now let's checkout      out the comments
jmoon018@hammer.cs.ucr.edu$ echo hi
hi
jmoon018@hammer.cs.ucr.edu$ echo #hi

jmoon018@hammer.cs.ucr.edu$ echo #  #hi

jmoon018@hammer.cs.ucr.edu$ echo hi # hi
hi
jmoon018@hammer.cs.ucr.edu$ echo ol    words xxx x x # comments this wont appear anywhere oh nooooo
words xxx x x
jmoon018@hammer.cs.ucr.edu$ #no   lets look at cmd connectors: &&
jmoon018@hammer.cs.ucr.edu$ l false || echo hi
hi
jmoon018@hammer.cs.ucr.edu$ true ||         fa  true && echo hi
hi
jmoon018@hammer.cs.ucr.edu$ false && echo hi
jmoon018@hammer.cs.ucr.edu$ echo hi * && echo TRUE!
hi
TRUE!
jmoon018@hammer.cs.ucr.edu$ e mkdir teemo && echo this will print
this will print
jmoon018@hammer.cs.ucr.edu$ mki dir teemo && thi   echo this wont print
mkdir: cannot create directory `teemo': File exists
jmoon018@hammer.cs.ucr.edu$ f true && echo more stuff; fals    echo lllll     hi world && e ls;   
more stuff
hi world
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ # || operator
jmoon018@hammer.cs.ucr.edu$ false || echo n i like my mouse
i like my mouse
jmoon018@hammer.cs.ucr.edu$ true || echo this wont print!
jmoon018@hammer.cs.ucr.edu$ echo this will print! || echo this wont print!
this will print!
jmoon018@hammer.cs.ucr.edu$ mkdir teemo || echo another print!
mkdir: cannot create directory `teemo': File exists
another print!
jmoon018@hammer.cs.ucr.edu$ echo print || echo print || echo print
print
jmoon018@hammer.cs.ucr.edu$ echo stuff || echo nah; echo words            mkd   false || echo i like music
stuff
jmoon018@hammer.cs.ucr.edu$ e echo words && echo hi || echo this shouldnt print
words
hi
jmoon018@hammer.cs.ucr.edu$ echo w this && echo will && echo all ||  && echo print
this
will
all
print
jmoon018@hammer.cs.ucr.edu$ echo stuff ||  &            echo wor        ls || echo words && echo hi
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #lets do some weird stuff
jmoon018@hammer.cs.ucr.edu$ ./a.out
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ exit
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo exit         # lets try to throw t it off f
jmoon018@hammer.cs.ucr.edu$ echo exit
exit
jmoon018@hammer.cs.ucr.edu$ ex cho exit exit exit **  &&&  ls
exit exit exit
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ rm newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  teemo  testfile.cpp	typescript
jmoon018@hammer.cs.ucr.edu$ # newfile.txt is gone!
jmoon018@hammer.cs.ucr.edu$ #o  ok now i leave                ;;;;;
jmoon018@hammer.cs.ucr.edu$ ;;;;;|||
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
jmoon018@hammer.cs.ucr.edu$ &&&&
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
jmoon018@hammer.cs.ucr.edu$ # prints errors appropriately
jmoon018@hammer.cs.ucr.edu$ # ith   i think thats all.. exiting
jmoon018@hammer.cs.ucr.edu$ exit
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ exit
exit

Script done on Tue 21 Oct 2014 11:39:21 PM PDT
[s%%%%%%%%%%[u[0;32mjmoon018[0;36m@[0;32mcs100[0;36m:[0;32m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell[0;95m (master) [0;36m$[0m c[Kcat typescript
Script started on Tue 21 Oct 2014 11:27:26 PM PDT
~
jmoon018@hammer $ .[Kcd[K[Kcs
bash: cs: command not found
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents/[K
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd[K[Kls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ git ucr-cs100
git: 'ucr-cs100' is not a git command. See 'git --help'.
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls[K[Kcd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell/rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ cd
~
jmoon018@hammer $ ls
[0m[01;34mDesktop[0m/  [01;34mDocuments[0m/  [01;34mDownloads[0m/  [01;32mhello.cpp[0m*  [01;32mlab1.cpp[0m*  [01;34mMusic[0m/  [01;34mPictures[0m/  [01;34mPublic[0m/  [01;34mTemplates[0m/  [01;34mVideos[0m/
[m~
jmoon018@hammer $ cd Documents
~/Documents
jmoon018@hammer $ ls
[0m[01;34mcs100gitHubStuff[0m/  [01;34mcs61[0m/  [01;34mfirstrepo[0m/
[m~/Documents
jmoon018@hammer $ cd cs100gitHubStuff
~/Documents/cs100gitHubStuff
jmoon018@hammer $ ls
[0m[01;34mlab2[0m/  [01;34mucr-cs100[0m/
[m~/Documents/cs100gitHubStuff
jmoon018@hammer $ cd ucr-cs100
~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ ls
[0m[01;34massignments[0m/  GRADES.md  [01;34mlecture[0m/  LICENSE  [01;34mpeople[0m/  README.md  [01;34mrshell[0m/  [01;34mscripts[0m/  [01;34mtutorials[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ ls
README.md  [0m[01;34mrshell[0m/
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell
jmoon018@hammer $ cd rshell
~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ c[Kls
[0m[01;32ma.out[0m*  exec.cpp  exec.script  Makefile  README.md  testfile.cpp  typescript
[m~/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer $ run[K[K[K./a.out
jmoon018@hammer.cs.ucr.edu$ #simple stuff
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world
hello world
jmoon018@hammer.cs.ucr.edu$ echo hello;
hello
jmoon018@hammer.cs.ucr.edu$ echo hello world;
hello world
jmoon018@hammer.cs.ucr.edu$ echo hell    hello hello hello echo  ; 
hello hello hello echo
jmoon018@hammer.cs.ucr.edu$ echo hello; echo nah; echo more words; echo more; ech  o more more more more more; echo i love words;
hello
nah
more words
more
more more more more more
i love words
jmoon018@hammer.cs.ucr.edu$ echo lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
lol ol ol ol ol words words words lol ji ji ji ijj ij ij l ol ol ol ol ol ol ol ol ol ol ol lo ol ol ol ol ol olo lol ol o lo lo lo lo lo lo lol ol o l
jmoon018@hammer.cs.ucr.edu$ #lets use different commands
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ ls - ls    -a
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ pwd
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ touch newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #look, the newfile.txt exists!
jmoon018@hammer.cs.ucr.edu$ e # lets use ; connector
jmoon018@hammer.cs.ucr.edu$ echo hello; echo world; echo .; 
hello
world
.
jmoon018@hammer.cs.ucr.edu$ echo hello world; echo my name is jamal. ; echo nice to meet you all.
hello world
my name is jamal
nice to meet you all.
jmoon018@hammer.cs.ucr.edu$ echo hello world!; lsl   ; ls -a; pwd
hello world!
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	testfile.cpp  typescript
.  ..  a.out  exec.cpp	exec.script  .git  Makefile  newfile.txt  README.md  testfile.cpp  typescript
/home/csmajs/jmoon018/Documents/cs100gitHubStuff/ucr-cs100/rshell/rshell/rshell
jmoon018@hammer.cs.ucr.edu$ #easy.. now let's checkout      out the comments
jmoon018@hammer.cs.ucr.edu$ echo hi
hi
jmoon018@hammer.cs.ucr.edu$ echo #hi

jmoon018@hammer.cs.ucr.edu$ echo #  #hi

jmoon018@hammer.cs.ucr.edu$ echo hi # hi
hi
jmoon018@hammer.cs.ucr.edu$ echo ol    words xxx x x # comments this wont appear anywhere oh nooooo
words xxx x x
jmoon018@hammer.cs.ucr.edu$ #no   lets look at cmd connectors: &&
jmoon018@hammer.cs.ucr.edu$ l false || echo hi
hi
jmoon018@hammer.cs.ucr.edu$ true ||         fa  true && echo hi
hi
jmoon018@hammer.cs.ucr.edu$ false && echo hi
jmoon018@hammer.cs.ucr.edu$ echo hi * && echo TRUE!
hi
TRUE!
jmoon018@hammer.cs.ucr.edu$ e mkdir teemo && echo this will print
this will print
jmoon018@hammer.cs.ucr.edu$ mki dir teemo && thi   echo this wont print
mkdir: cannot create directory `teemo': File exists
jmoon018@hammer.cs.ucr.edu$ f true && echo more stuff; fals    echo lllll     hi world && e ls;   
more stuff
hi world
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ # || operator
jmoon018@hammer.cs.ucr.edu$ false || echo n i like my mouse
i like my mouse
jmoon018@hammer.cs.ucr.edu$ true || echo this wont print!
jmoon018@hammer.cs.ucr.edu$ echo this will print! || echo this wont print!
this will print!
jmoon018@hammer.cs.ucr.edu$ mkdir teemo || echo another print!
mkdir: cannot create directory `teemo': File exists
another print!
jmoon018@hammer.cs.ucr.edu$ echo print || echo print || echo print
print
jmoon018@hammer.cs.ucr.edu$ echo stuff || echo nah; echo words            mkd   false || echo i like music
stuff
jmoon018@hammer.cs.ucr.edu$ e echo words && echo hi || echo this shouldnt print
words
hi
jmoon018@hammer.cs.ucr.edu$ echo w this && echo will && echo all ||  && echo print
this
will
all
print
jmoon018@hammer.cs.ucr.edu$ echo stuff ||  &            echo wor        ls || echo words && echo hi
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ #lets do some weird stuff
jmoon018@hammer.cs.ucr.edu$ ./a.out
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ exit
jmoon018@hammer.cs.ucr.edu$ echo hello
hello
jmoon018@hammer.cs.ucr.edu$ echo exit         # lets try to throw t it off f
jmoon018@hammer.cs.ucr.edu$ echo exit
exit
jmoon018@hammer.cs.ucr.edu$ ex cho exit exit exit **  &&&  ls
exit exit exit
a.out  exec.cpp  exec.script  Makefile	newfile.txt  README.md	teemo  testfile.cpp  typescript
jmoon018@hammer.cs.ucr.edu$ rm newfile.txt
jmoon018@hammer.cs.ucr.edu$ ls
a.out  exec.cpp  exec.script  Makefile	README.md  teemo  testfile.cpp	typescript
jmoon018@hammer.cs.ucr.edu$ # newfile.txt is gone!
jmoon018@hammer.cs.ucr.edu$ #o  ok now i leave                ;;;;;
jmoon018@hammer.cs.ucr.edu$ ;;;;;|||
ERROR: EXECUTING THE CMD FAILED
: No such file or directory
jmoon018@ha